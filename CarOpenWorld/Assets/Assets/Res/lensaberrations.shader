Shader "Hidden/LensAberrations" {
	Properties {
		_MainTex ("Texture", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 40832
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec4 u_xlat10_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec4 u_xlat10_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec4 u_xlat10_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_3.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_3.x = sqrt(u_xlat16_3.x);
					    u_xlat16_3.xy = u_xlat16_3.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_3.x);
					    u_xlat16_3.x = sin(u_xlat16_3.x);
					    u_xlat16_9 = float(1.0) / u_xlat16_3.y;
					    u_xlat16_3.x = u_xlat16_3.x / u_xlat16_4.x;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_9 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_3.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_10 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_2.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_2.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_2.x = sqrt(u_xlat16_2.x);
					    u_xlat16_2.xy = u_xlat16_2.xx * _DistAmount.xy;
					    u_xlat16_4.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_4.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8 + -1.0;
					    u_xlat16_2.xy = u_xlat16_2.zw * u_xlat16_2.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_2.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					    u_xlat3 = min(u_xlat16_8, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					    u_xlat5 = min(u_xlat16_11, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					    u_xlat3 = min(u_xlat16_8, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					    u_xlat5 = min(u_xlat16_11, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					    u_xlat3 = min(u_xlat16_8, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					    u_xlat5 = min(u_xlat16_11, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat10_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat10_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat10_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat10_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					    u_xlat6 = min(u_xlat16_11, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat10_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb23 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat3 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb24 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat5 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb23 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat3 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb24 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat5 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec2 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump vec2 u_xlat16_14;
					float u_xlat16;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat19;
					mediump float u_xlat16_19;
					bool u_xlatb23;
					bool u_xlatb24;
					bool u_xlatb26;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_9 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_16 = u_xlat16_9 * 0.0208350997 + -0.0851330012;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + 0.180141002;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_16 + -0.330299497;
					    u_xlat16_9 = u_xlat16_9 * u_xlat16_16 + 0.999866009;
					    u_xlat16_16 = u_xlat16_9 * u_xlat16_2.x;
					    u_xlat16 = u_xlat16_16 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb23 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb23 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat3 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat16 = u_xlatb23 ? u_xlat16 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_9 + u_xlat16;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_10 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_17 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + 0.180141002;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_17 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_17 + 0.999866009;
					    u_xlat16_17 = u_xlat16_10 * u_xlat16_3.x;
					    u_xlat17 = u_xlat16_17 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb24 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb24 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat5 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat17 = u_xlatb24 ? u_xlat17 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_10 + u_xlat17;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_3 = u_xlat16_3 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 * vec4(0.227027029, 0.227027029, 0.227027029, 0.227027029) + u_xlat16_3;
					    u_xlat16_1.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_8 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat5 + -1.0;
					    u_xlat16_1.xy = u_xlat16_2.zw * u_xlat16_1.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_0 = u_xlat16_1 * vec4(0.31621623, 0.31621623, 0.31621623, 0.31621623) + u_xlat16_0;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_0 = u_xlat16_3 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_11 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_12 = min(abs(u_xlat16_11), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_19 = u_xlat16_12 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_19 + -0.330299497;
					    u_xlat16_12 = u_xlat16_12 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_5;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_11));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_11);
					#endif
					    u_xlat6 = min(u_xlat16_11, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat19 = u_xlatb26 ? u_xlat19 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_12 + u_xlat19;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    SV_Target0 = u_xlat16_1 * vec4(0.0702702701, 0.0702702701, 0.0702702701, 0.0702702701) + u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.w = u_xlat10_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.w = u_xlat10_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    u_xlat16_0.w = u_xlat10_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.w = u_xlat16_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.w = u_xlat16_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_0.w = u_xlat16_0.w * 0.227027029;
					    u_xlat16_0.xyz = u_xlat16_2.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_1 = vs_TEXCOORD1 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_2.xy = u_xlat16_1.xy * u_xlat16_2.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD1.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD1.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.31621623;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_1 = vs_TEXCOORD2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_4.xy = u_xlat16_1.xy * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.xy;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.0702702701;
					    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_2;
					    u_xlat16_4.x = dot(u_xlat16_1.zw, u_xlat16_1.zw);
					    u_xlat16_4.xy = u_xlat16_1.zw * u_xlat16_4.xx;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD2.zw;
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD2.zw);
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_6.xyz = texture2D(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_11;
					mediump vec2 u_xlat16_14;
					mediump vec2 u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_14.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_14.xy = u_xlat16_14.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_8 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + -1.0;
					    u_xlat16_0.xy = u_xlat16_14.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_1.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_2.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_4.xx;
					    u_xlat16_2.xy = (-u_xlat16_2.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_2.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_0.xy = u_xlat16_0.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_0.x);
					    u_xlat16_0.x = sin(u_xlat16_0.x);
					    u_xlat16_7 = float(1.0) / u_xlat16_0.y;
					    u_xlat16_0.x = u_xlat16_0.x / u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_7 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_14.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_2.x = dot(u_xlat16_14.xy, u_xlat16_14.xy);
					    u_xlat16_14.xy = u_xlat16_14.xy * u_xlat16_2.xx;
					    u_xlat16_14.xy = (-u_xlat16_14.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_14.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_6.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_4.xy = u_xlat16_4.xx * _DistAmount.xy;
					    u_xlat16_5 = cos(u_xlat16_4.x);
					    u_xlat16_4.x = sin(u_xlat16_4.x);
					    u_xlat16_11 = float(1.0) / u_xlat16_4.y;
					    u_xlat16_4.x = u_xlat16_4.x / u_xlat16_5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_18.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_5 = dot(u_xlat16_18.xy, u_xlat16_18.xy);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(u_xlat16_5);
					    u_xlat16_18.xy = (-u_xlat16_18.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_6.xyz = texture(_MainTex, u_xlat16_18.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					    u_xlat3 = min(u_xlat16_9, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					    u_xlat5 = min(u_xlat16_12, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					    u_xlat3 = min(u_xlat16_9, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					    u_xlat5 = min(u_xlat16_12, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					varying mediump vec4 vs_TEXCOORD1;
					varying mediump vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					    u_xlat3 = min(u_xlat16_9, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					    u_xlat5 = min(u_xlat16_12, 1.0);
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					    u_xlat6 = min(u_xlat16_8, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_2.xyz) + u_xlat10_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_2.xyz;
					    u_xlat16_2.w = u_xlat10_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_3 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_3.xyz;
					    u_xlat16_3.w = u_xlat10_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5 = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = float(1.0) / u_xlat16_5;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5 = u_xlat16_5 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5 * u_xlat16_5;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					    u_xlat6 = min(u_xlat16_12, 1.0);
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5 * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat10_5.xyz = texture2D(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat10_1.xyz) + u_xlat10_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_1.xyz;
					    u_xlat16_1.w = u_xlat10_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_9));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					#endif
					    u_xlat3 = min(u_xlat16_9, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb27 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat5 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_9));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					#endif
					    u_xlat3 = min(u_xlat16_9, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb27 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat5 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec2 _BlurPass;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					out mediump vec4 vs_TEXCOORD1;
					out mediump vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = _BlurPass.xy * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD1.zw = (-_BlurPass.xy) * vec2(1.38461542, 1.38461542) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.xy = _BlurPass.xy * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    vs_TEXCOORD2.zw = (-_BlurPass.xy) * vec2(3.23076916, 3.23076916) + in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					in mediump vec4 vs_TEXCOORD1;
					in mediump vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec4 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					float u_xlat6;
					bool u_xlatb6;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump float u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_12;
					mediump float u_xlat16_13;
					mediump vec2 u_xlat16_16;
					float u_xlat18;
					mediump float u_xlat16_18;
					float u_xlat19;
					mediump float u_xlat16_19;
					mediump vec2 u_xlat16_20;
					float u_xlat21;
					mediump float u_xlat16_21;
					bool u_xlatb26;
					bool u_xlatb27;
					bool u_xlatb29;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_16.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_16.xy = u_xlat16_16.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_9 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_10 = min(abs(u_xlat16_9), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_18 = u_xlat16_10 * 0.0208350997 + -0.0851330012;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + 0.180141002;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_18 + -0.330299497;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_18 + 0.999866009;
					    u_xlat16_18 = u_xlat16_10 * u_xlat16_2.x;
					    u_xlat18 = u_xlat16_18 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb26 = !!(1.0<abs(u_xlat16_9));
					#else
					    u_xlatb26 = 1.0<abs(u_xlat16_9);
					#endif
					    u_xlat3 = min(u_xlat16_9, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat18 = u_xlatb26 ? u_xlat18 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_10 + u_xlat18;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_16.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_1.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.227027029;
					    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(0.227027029, 0.227027029, 0.227027029);
					    u_xlat16_0 = vs_TEXCOORD1 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_0 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_0 = u_xlat16_0 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_3.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;
					    u_xlat16_11 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11;
					    u_xlat16_11 = u_xlat16_3.x * u_xlat16_3.x;
					    u_xlat16_19 = u_xlat16_11 * 0.0208350997 + -0.0851330012;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + 0.180141002;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_19 + -0.330299497;
					    u_xlat16_11 = u_xlat16_11 * u_xlat16_19 + 0.999866009;
					    u_xlat16_19 = u_xlat16_11 * u_xlat16_3.x;
					    u_xlat19 = u_xlat16_19 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb27 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb27 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat5 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(u_xlat5<(-u_xlat5));
					#else
					    u_xlatb5 = u_xlat5<(-u_xlat5);
					#endif
					    u_xlat19 = u_xlatb27 ? u_xlat19 : float(0.0);
					    u_xlat3 = u_xlat16_3.x * u_xlat16_11 + u_xlat19;
					    u_xlat3 = (u_xlatb5) ? (-u_xlat3) : u_xlat3;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat3 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_0.xy;
					    u_xlat16_4.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_20.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_20.xx * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.31621623;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_0.x = sqrt(u_xlat16_0.x);
					    u_xlat16_8 = u_xlat16_0.x * _DistAmount.y;
					    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_0.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_8), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_8));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_8);
					#endif
					    u_xlat6 = min(u_xlat16_8, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_2.zw * u_xlat16_0.xx + u_xlat16_0.zw;
					    u_xlat16_16.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
					    u_xlat16_16.xy = u_xlat16_16.xy * u_xlat16_4.xx;
					    u_xlat16_16.xy = (-u_xlat16_16.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_16.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_2.xyz) + u_xlat16_5.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.w = u_xlat16_2.w * 0.31621623;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * vec3(0.31621623, 0.31621623, 0.31621623);
					    u_xlat16_0 = u_xlat16_1 + u_xlat16_2;
					    u_xlat16_1 = vs_TEXCOORD2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat16_2 = u_xlat16_1 * _DistAmount.zzzz + (-_DistCenterScale.xyxy);
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat16_2 = u_xlat16_2 * _DistCenterScale.zwzw;
					    u_xlat16_4.x = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.xy * u_xlat16_4.xx + u_xlat16_1.xy;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_3 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.w = u_xlat16_3.w * 0.0702702701;
					    u_xlat16_3.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_3;
					    u_xlat16_4.x = dot(u_xlat16_2.zw, u_xlat16_2.zw);
					    u_xlat16_4.x = sqrt(u_xlat16_4.x);
					    u_xlat16_12 = u_xlat16_4.x * _DistAmount.y;
					    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * _DistAmount.x;
					    u_xlat16_5.x = max(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
					    u_xlat16_13 = min(abs(u_xlat16_12), 1.0);
					    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_21 = u_xlat16_13 * 0.0208350997 + -0.0851330012;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + 0.180141002;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_21 + -0.330299497;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_21 + 0.999866009;
					    u_xlat16_21 = u_xlat16_13 * u_xlat16_5.x;
					    u_xlat21 = u_xlat16_21 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb29 = !!(1.0<abs(u_xlat16_12));
					#else
					    u_xlatb29 = 1.0<abs(u_xlat16_12);
					#endif
					    u_xlat6 = min(u_xlat16_12, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(u_xlat6<(-u_xlat6));
					#else
					    u_xlatb6 = u_xlat6<(-u_xlat6);
					#endif
					    u_xlat21 = u_xlatb29 ? u_xlat21 : float(0.0);
					    u_xlat5 = u_xlat16_5.x * u_xlat16_13 + u_xlat21;
					    u_xlat5 = (u_xlatb6) ? (-u_xlat5) : u_xlat5;
					    u_xlat16_4.x = u_xlat16_4.x * u_xlat5 + -1.0;
					    u_xlat16_4.xy = u_xlat16_2.zw * u_xlat16_4.xx + u_xlat16_1.zw;
					    u_xlat16_20.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_7 = dot(u_xlat16_20.xy, u_xlat16_20.xy);
					    u_xlat16_20.xy = u_xlat16_20.xy * vec2(u_xlat16_7);
					    u_xlat16_20.xy = (-u_xlat16_20.xy) * _ChromaticAberration.ww + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_5.xyz = texture(_MainTex, u_xlat16_20.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_1.w = u_xlat16_1.w * 0.0702702701;
					    u_xlat16_1.xyz = u_xlat16_4.xyz * vec3(0.0702702701, 0.0702702701, 0.0702702701);
					    SV_Target0 = u_xlat16_0 + u_xlat16_1;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "CHROMATIC_ABERRATION" "UNDISTORT" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 97523
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat10_0.xyz) + u_xlat10_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_6 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_6) * u_xlat16_0.xy;
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 173835
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_4;
					mediump vec2 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_6.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_6.xy = u_xlat16_6.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_4 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4 + -1.0;
					    u_xlat16_0.xy = u_xlat16_6.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat10_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    SV_Target0 = u_xlat16_0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 223493
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_6.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xxx);
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_6.xyz + u_xlat16_2.xxx;
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = u_xlat16_12 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_4.x = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.x = u_xlat16_4.x * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
					#else
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 263845
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_5;
					mediump vec2 u_xlat16_8;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2 = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(u_xlat16_1);
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(u_xlat16_1);
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_5 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					    u_xlat3 = min(u_xlat16_5, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(u_xlat16_1);
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2.x;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2.x;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump float u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_6 = min(abs(u_xlat16_5), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2.x;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5);
					#endif
					    u_xlat3 = min(u_xlat16_5, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_8.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_1.xx;
					    u_xlat16_8.xy = (-u_xlat16_8.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_8.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    SV_Target0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 381337
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat10_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat10_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat10_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_10 = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.xy = vec2(u_xlat16_10) * u_xlat16_0.xy;
					    u_xlat16_10 = u_xlat16_10 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_0.xy = (-u_xlat16_0.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_0.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_0.xyw = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_0.xyw = _ChromaticAberration.xyz * u_xlat16_0.xyw + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_0.xyw) + u_xlat16_1.xyz;
					    u_xlat16_0.xyz = vec3(u_xlat16_10) * u_xlat16_3.xyz + u_xlat16_0.xyw;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_3.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_3.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_12) * u_xlat16_1.xy;
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_12 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_4.xy = vec2(u_xlat16_12) * u_xlat16_4.xy;
					    u_xlat16_4.xy = (-u_xlat16_4.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_4.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xyz = _ChromaticAberration.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_3.x = dot(u_xlat16_4.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_3.xxx;
					    u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					lowp vec3 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.xy = vec2(u_xlat16_15) * u_xlat16_1.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xy = (-u_xlat16_1.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_1.xy).xyz;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_2.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec3 u_xlat10_1;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat10_1.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_1.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat10_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_5.xy = vec2(u_xlat16_15) * u_xlat16_5.xy;
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = (-u_xlat16_5.xy) * _ChromaticAberration.ww + vs_TEXCOORD0.xy;
					    u_xlat16_1.xyz = texture(_MainTex, u_xlat16_5.xy).xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_3.xyz = _ChromaticAberration.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_1.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_1.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.x = dot(u_xlat16_5.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_8.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xxx);
					    u_xlat16_3.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_8.xyz + u_xlat16_3.xxx;
					    u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_3.xyz);
					    u_xlat16_5.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 456689
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_8;
					mediump float u_xlat16_13;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_5.x = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_5.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_5.xyz + u_xlat16_1.xxx;
					    u_xlat16_2.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_3.xy = u_xlat16_3.xy * _VignetteSettings.xx;
					    u_xlat16_13 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_13 = (-u_xlat16_13) + 1.0;
					    u_xlat16_13 = max(u_xlat16_13, 0.0);
					    u_xlat16_13 = log2(u_xlat16_13);
					    u_xlat16_13 = u_xlat16_13 * _VignetteSettings.y;
					    u_xlat16_13 = exp2(u_xlat16_13);
					    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_13) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_9.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_9.xy = u_xlat16_9.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_9.xy, u_xlat16_9.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_2.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_2.x * u_xlat16_12 + -1.0;
					    u_xlat16_1.xy = u_xlat16_9.xy * vec2(u_xlat16_12) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat10_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat10_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec2 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_9;
					mediump float u_xlat16_12;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_1.xy = u_xlat16_4.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistCenterScale.zw;
					    u_xlat16_12 = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_12 = sqrt(u_xlat16_12);
					    u_xlat16_9.xy = vec2(u_xlat16_12) * _DistAmount.xy;
					    u_xlat16_2.x = sin(u_xlat16_9.x);
					    u_xlat16_3 = cos(u_xlat16_9.x);
					    u_xlat16_12 = float(1.0) / u_xlat16_9.y;
					    u_xlat16_9.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_12 = u_xlat16_9.x * u_xlat16_12 + -1.0;
					    u_xlat16_4.xy = u_xlat16_1.xy * vec2(u_xlat16_12) + u_xlat16_4.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_4.xy);
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-u_xlat16_4.xxx) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + u_xlat16_4.xxx;
					    u_xlat16_2.xyz = (-u_xlat16_4.xyz) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat10_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec2 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_3.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_3.xy, u_xlat16_3.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_16;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_16 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_16)) + u_xlat16_1.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_16);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.xx;
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat10_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb14;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_8.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_8.xy = u_xlat16_8.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_5.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_6 = min(abs(u_xlat16_5.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_6;
					    u_xlat16_6 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_10 = u_xlat16_6 * 0.0208350997 + -0.0851330012;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + 0.180141002;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_10 + -0.330299497;
					    u_xlat16_6 = u_xlat16_6 * u_xlat16_10 + 0.999866009;
					    u_xlat16_10 = u_xlat16_6 * u_xlat16_2;
					    u_xlat10 = u_xlat16_10 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb14 = !!(1.0<abs(u_xlat16_5.x));
					#else
					    u_xlatb14 = 1.0<abs(u_xlat16_5.x);
					#endif
					    u_xlat3 = min(u_xlat16_5.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_6 + u_xlat10;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_8.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_1.xy = abs(u_xlat16_1.xy) * _VignetteSettings.xx;
					    u_xlat16_1.xy = log2(u_xlat16_1.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _VignetteSettings.zz;
					    u_xlat16_1.xy = exp2(u_xlat16_1.xy);
					    u_xlat16_1.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
					    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
					    u_xlat16_1.x = max(u_xlat16_1.x, 0.0);
					    u_xlat16_1.x = log2(u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * _VignetteSettings.y;
					    u_xlat16_1.x = exp2(u_xlat16_1.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat10_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7.x = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7.x), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7.x));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7.x);
					#endif
					    u_xlat3 = min(u_xlat16_7.x, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_1.x = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_7.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xxx);
					    u_xlat16_1.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_7.xyz + u_xlat16_1.xxx;
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_1.xyz);
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_16;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = u_xlat16_16 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_16 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_16 = (-u_xlat16_16) + 1.0;
					    u_xlat16_16 = max(u_xlat16_16, 0.0);
					    u_xlat16_16 = log2(u_xlat16_16);
					    u_xlat16_16 = u_xlat16_16 * _VignetteSettings.y;
					    u_xlat16_16 = exp2(u_xlat16_16);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec2 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat10_0 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_19;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_0 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_19 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_19 = u_xlat16_19 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    u_xlat16_19 = dot(u_xlat16_1.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_19)) + u_xlat16_1.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_19);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_19 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_19 = (-u_xlat16_19) + 1.0;
					    u_xlat16_19 = max(u_xlat16_19, 0.0);
					    u_xlat16_19 = log2(u_xlat16_19);
					    u_xlat16_19 = u_xlat16_19 * _VignetteSettings.y;
					    u_xlat16_19 = exp2(u_xlat16_19);
					    u_xlat16_1.xyz = vec3(u_xlat16_19) * u_xlat16_1.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
			}
		}
		Pass {
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 476909
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.xx;
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_2.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_2.xy = u_xlat16_2.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_2.xy, u_xlat16_2.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump float u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_11;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_5.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_11.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_11.xy = u_xlat16_11.xy * _DistCenterScale.zw;
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_15 = sqrt(u_xlat16_15);
					    u_xlat16_2.xy = vec2(u_xlat16_15) * _DistAmount.xy;
					    u_xlat16_3 = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_15 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3;
					    u_xlat16_15 = u_xlat16_2.x * u_xlat16_15 + -1.0;
					    u_xlat16_1.xy = u_xlat16_11.xy * vec2(u_xlat16_15) + u_xlat16_1.xy;
					    u_xlat16_11.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_11.xy, u_xlat16_11.xy);
					    u_xlat16_11.xy = vec2(u_xlat16_15) * u_xlat16_11.xy;
					    u_xlat16_11.xy = (-u_xlat16_11.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_11.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec2 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat10_2 = texture2D(_MainTex, u_xlat16_1.xy);
					    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat10_2.xyz) + u_xlat10_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat10_2.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    u_xlat10_4.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat10_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_13;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_0.xy = abs(u_xlat16_0.xy) * _VignetteSettings.xx;
					    u_xlat16_0.xy = log2(u_xlat16_0.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _VignetteSettings.zz;
					    u_xlat16_0.xy = exp2(u_xlat16_0.xy);
					    u_xlat16_0.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
					    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
					    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);
					    u_xlat16_0.x = log2(u_xlat16_0.x);
					    u_xlat16_0.x = u_xlat16_0.x * _VignetteSettings.y;
					    u_xlat16_0.x = exp2(u_xlat16_0.x);
					    u_xlat16_6.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz + _VignetteColor.xyz;
					    u_xlat16_1.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_13.xy = u_xlat16_1.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_1.xy = u_xlat16_1.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_13.xy = u_xlat16_13.xy * _DistCenterScale.zw;
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_18 = sqrt(u_xlat16_18);
					    u_xlat16_2.xy = vec2(u_xlat16_18) * _DistAmount.xy;
					    u_xlat16_3.x = cos(u_xlat16_2.x);
					    u_xlat16_2.x = sin(u_xlat16_2.x);
					    u_xlat16_18 = float(1.0) / u_xlat16_2.y;
					    u_xlat16_2.x = u_xlat16_2.x / u_xlat16_3.x;
					    u_xlat16_18 = u_xlat16_2.x * u_xlat16_18 + -1.0;
					    u_xlat16_1.xy = u_xlat16_13.xy * vec2(u_xlat16_18) + u_xlat16_1.xy;
					    u_xlat16_13.xy = u_xlat16_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_13.xy, u_xlat16_13.xy);
					    u_xlat16_13.xy = vec2(u_xlat16_18) * u_xlat16_13.xy;
					    u_xlat16_13.xy = (-u_xlat16_13.xy) * _ChromaticAberration.ww + u_xlat16_1.xy;
					    u_xlat16_2 = texture(_MainTex, u_xlat16_1.xy);
					    u_xlat16_4.xyz = texture(_MainTex, u_xlat16_13.xy).xyz;
					    u_xlat16_1.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
					    u_xlat16_1.xyz = _ChromaticAberration.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    u_xlat16_4.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_4.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec3 u_xlat10_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_3.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat10_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump vec2 u_xlat16_10;
					mediump float u_xlat16_15;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_1.xy = u_xlat16_1.xx * _DistAmount.xy;
					    u_xlat16_2.x = cos(u_xlat16_1.x);
					    u_xlat16_1.x = sin(u_xlat16_1.x);
					    u_xlat16_6 = float(1.0) / u_xlat16_1.y;
					    u_xlat16_1.x = u_xlat16_1.x / u_xlat16_2.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_6 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_3.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_3.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = u_xlat16_15 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
					#else
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_2.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_2.xyz + vec3(u_xlat16_15);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.xx;
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_6 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					    u_xlat3 = min(u_xlat16_6, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(u_xlat16_1);
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump float u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec2 u_xlat16_10;
					float u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_15;
					bool u_xlatb17;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_10.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_10.xy = u_xlat16_10.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_6 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_7 = min(abs(u_xlat16_6), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7;
					    u_xlat16_7 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_12 = u_xlat16_7 * 0.0208350997 + -0.0851330012;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + 0.180141002;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_12 + -0.330299497;
					    u_xlat16_7 = u_xlat16_7 * u_xlat16_12 + 0.999866009;
					    u_xlat16_12 = u_xlat16_7 * u_xlat16_2.x;
					    u_xlat12 = u_xlat16_12 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb17 = !!(1.0<abs(u_xlat16_6));
					#else
					    u_xlatb17 = 1.0<abs(u_xlat16_6);
					#endif
					    u_xlat3 = min(u_xlat16_6, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat12 = u_xlatb17 ? u_xlat12 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_7 + u_xlat12;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_10.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_10.xy, u_xlat16_10.xy);
					    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat16_1.xx;
					    u_xlat16_10.xy = (-u_xlat16_10.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_10.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_15 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_15 = (-u_xlat16_15) + 1.0;
					    u_xlat16_15 = max(u_xlat16_15, 0.0);
					    u_xlat16_15 = log2(u_xlat16_15);
					    u_xlat16_15 = u_xlat16_15 * _VignetteSettings.y;
					    u_xlat16_15 = exp2(u_xlat16_15);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_15) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_4.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_4.xy = abs(u_xlat16_4.xy) * _VignetteSettings.xx;
					    u_xlat16_4.xy = log2(u_xlat16_4.xy);
					    u_xlat16_4.xy = u_xlat16_4.xy * _VignetteSettings.zz;
					    u_xlat16_4.xy = exp2(u_xlat16_4.xy);
					    u_xlat16_18 = dot(u_xlat16_4.xy, u_xlat16_4.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _BlurTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					mediump vec3 u_xlat16_0;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					float u_xlat2;
					mediump float u_xlat16_2;
					lowp vec3 u_xlat10_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1 = sqrt(u_xlat16_1);
					    u_xlat16_7 = u_xlat16_1 * _DistAmount.y;
					    u_xlat16_1 = float(1.0) / u_xlat16_1;
					    u_xlat16_1 = u_xlat16_1 * _DistAmount.x;
					    u_xlat16_2 = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = float(1.0) / u_xlat16_2;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					    u_xlat3 = min(u_xlat16_7, 1.0);
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2 * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1 = u_xlat16_1 * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * vec2(u_xlat16_1) + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1 = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * vec2(u_xlat16_1);
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat10_1 = texture2D(_MainTex, u_xlat16_0.xy);
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat10_1.xyz) + u_xlat10_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat10_1.xyz;
					    SV_Target0.w = u_xlat10_1.w;
					    u_xlat10_2.xyz = texture2D(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat10_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _ChromaticAberration;
					uniform 	mediump vec4 _DistCenterScale;
					uniform 	mediump vec3 _DistAmount;
					uniform 	mediump vec3 _VignetteColor;
					uniform 	mediump vec3 _VignetteSettings;
					uniform 	mediump vec2 _VignetteCenter;
					uniform 	mediump float _VignetteBlur;
					uniform 	mediump float _VignetteDesat;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _BlurTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					float u_xlat2;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump float u_xlat16_7;
					mediump float u_xlat16_8;
					mediump vec2 u_xlat16_12;
					float u_xlat14;
					mediump float u_xlat16_14;
					mediump float u_xlat16_18;
					bool u_xlatb20;
					void main()
					{
					    u_xlat16_0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
					    u_xlat16_12.xy = u_xlat16_0.xy * _DistAmount.zz + (-_DistCenterScale.xy);
					    u_xlat16_0.xy = u_xlat16_0.xy * _DistAmount.zz + vec2(0.5, 0.5);
					    u_xlat16_12.xy = u_xlat16_12.xy * _DistCenterScale.zw;
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_1.x = sqrt(u_xlat16_1.x);
					    u_xlat16_7 = u_xlat16_1.x * _DistAmount.y;
					    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * _DistAmount.x;
					    u_xlat16_2.x = max(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;
					    u_xlat16_8 = min(abs(u_xlat16_7), 1.0);
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_14 = u_xlat16_8 * 0.0208350997 + -0.0851330012;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + 0.180141002;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_14 + -0.330299497;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_14 + 0.999866009;
					    u_xlat16_14 = u_xlat16_8 * u_xlat16_2.x;
					    u_xlat14 = u_xlat16_14 * -2.0 + 1.57079637;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(1.0<abs(u_xlat16_7));
					#else
					    u_xlatb20 = 1.0<abs(u_xlat16_7);
					#endif
					    u_xlat3 = min(u_xlat16_7, 1.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat3<(-u_xlat3));
					#else
					    u_xlatb3 = u_xlat3<(-u_xlat3);
					#endif
					    u_xlat14 = u_xlatb20 ? u_xlat14 : float(0.0);
					    u_xlat2 = u_xlat16_2.x * u_xlat16_8 + u_xlat14;
					    u_xlat2 = (u_xlatb3) ? (-u_xlat2) : u_xlat2;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat2 + -1.0;
					    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat16_1.xx + u_xlat16_0.xy;
					    u_xlat16_12.xy = u_xlat16_0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_1.x = dot(u_xlat16_12.xy, u_xlat16_12.xy);
					    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat16_1.xx;
					    u_xlat16_12.xy = (-u_xlat16_12.xy) * _ChromaticAberration.ww + u_xlat16_0.xy;
					    u_xlat16_1 = texture(_MainTex, u_xlat16_0.xy);
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat16_12.xy).xyz;
					    u_xlat16_0.xyz = (-u_xlat16_1.xyz) + u_xlat16_2.xyz;
					    u_xlat16_0.xyz = _ChromaticAberration.xyz * u_xlat16_0.xyz + u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_1.w;
					    u_xlat16_2.xyz = texture(_BlurTex, vs_TEXCOORD0.xy).xyz;
					    u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat16_5.xy = vs_TEXCOORD0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = u_xlat16_18 * _VignetteBlur;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
					#else
					    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
					#endif
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					    u_xlat16_18 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_4.xyz = (-vec3(u_xlat16_18)) + u_xlat16_0.xyz;
					    u_xlat16_4.xyz = vec3(vec3(_VignetteDesat, _VignetteDesat, _VignetteDesat)) * u_xlat16_4.xyz + vec3(u_xlat16_18);
					    u_xlat16_0.xyz = u_xlat16_0.xyz + (-u_xlat16_4.xyz);
					    u_xlat16_5.xy = vs_TEXCOORD0.xy + (-_VignetteCenter.xy);
					    u_xlat16_5.xy = abs(u_xlat16_5.xy) * _VignetteSettings.xx;
					    u_xlat16_5.xy = log2(u_xlat16_5.xy);
					    u_xlat16_5.xy = u_xlat16_5.xy * _VignetteSettings.zz;
					    u_xlat16_5.xy = exp2(u_xlat16_5.xy);
					    u_xlat16_18 = dot(u_xlat16_5.xy, u_xlat16_5.xy);
					    u_xlat16_18 = (-u_xlat16_18) + 1.0;
					    u_xlat16_18 = max(u_xlat16_18, 0.0);
					    u_xlat16_18 = log2(u_xlat16_18);
					    u_xlat16_18 = u_xlat16_18 * _VignetteSettings.y;
					    u_xlat16_18 = exp2(u_xlat16_18);
					    u_xlat16_0.xyz = vec3(u_xlat16_18) * u_xlat16_0.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = (-_VignetteColor.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _VignetteColor.xyz;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_CLASSIC" "VIGNETTE_DESAT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "UNDISTORT" "VIGNETTE_BLUR" "VIGNETTE_DESAT" "VIGNETTE_FILMIC" }
					"!!GLES3"
				}
			}
		}
	}
}