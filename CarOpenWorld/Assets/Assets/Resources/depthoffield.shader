Shader "Hidden/DepthOfField/DepthOfField" {
	Properties {
		_MainTex ("-", 2D) = "black" {}
		_SecondTex ("-", 2D) = "black" {}
		_ThirdTex ("-", 2D) = "black" {}
	}
	SubShader {
		Tags { "Name" = "MainSubShader_SM5" }
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 17870
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 68677
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 166199
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 230432
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 271240
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					layout(location = 1) out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					layout(location = 0) in highp vec2 vs_TEXCOORD0;
					layout(location = 1) in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					layout(location = 1) out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					layout(location = 0) in highp vec2 vs_TEXCOORD0;
					layout(location = 1) in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					layout(location = 1) out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					layout(location = 0) in highp vec2 vs_TEXCOORD0;
					layout(location = 1) in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 331053
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 422068
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat16_0.w<0.0;
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat16_0.w<0.0;
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat16_0.w<0.0;
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 496343
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 543347
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 601479
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 658601
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 723760
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 310 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					layout(location = 0) out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 310 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					layout(location = 0) in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 789793
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 897932
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 937343
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1039616
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1077389
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1138777
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1191643
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1308927
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1368485
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1438162
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1492045
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "MainSubShader_SM5" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1518987
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
	}
	SubShader {
		Tags { "Name" = "FallbackSubShader_SM3" }
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1613883
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat10_2.w + u_xlat10_2.w;
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat10_2.xyz;
					    u_xlat2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat10_0.w + u_xlat10_0.w;
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					mediump float u_xlat16_13;
					mediump float u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					mediump float u_xlat16_22;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0);
					    u_xlat16_1.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0);
					    u_xlat16_1.z = u_xlat16_2.w + u_xlat16_2.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.z = min(max(u_xlat16_1.z, 0.0), 1.0);
					#else
					    u_xlat16_1.z = clamp(u_xlat16_1.z, 0.0, 1.0);
					#endif
					    u_xlat16_7.xz = u_xlat16_1.xz * vec2(0.800000012, 0.800000012);
					    u_xlat16_3.xyz = u_xlat16_7.zzz * u_xlat16_2.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat2.www + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0);
					    u_xlat16_7.x = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_19 = u_xlat16_7.x * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0);
					    u_xlat16_19 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_19 = min(max(u_xlat16_19, 0.0), 1.0);
					#else
					    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);
					#endif
					    u_xlat16_21 = u_xlat16_19 * 0.675000012;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_21) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0);
					    u_xlat16_21 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat16_4 = u_xlat16_21 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_4) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0);
					    u_xlat16_4 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    u_xlat16_10 = u_xlat16_4 * 0.5;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_10) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0);
					    u_xlat16_10 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_16 = u_xlat16_10 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_16) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0);
					    u_xlat16_16 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
					#else
					    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
					#endif
					    u_xlat16_22 = u_xlat16_16 * 0.200000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_22) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0);
					    u_xlat16_22 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
					#else
					    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
					#endif
					    u_xlat16_5 = u_xlat16_22 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_5) + u_xlat16_3.xyz;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0);
					    u_xlat16_5 = u_xlat16_0.w + u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5 = min(max(u_xlat16_5, 0.0), 1.0);
					#else
					    u_xlat16_5 = clamp(u_xlat16_5, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat16_5 * 0.075000003;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(u_xlat16_11) + u_xlat16_3.xyz;
					    u_xlat16_13 = u_xlat16_1.z * 0.800000012 + u_xlat2.w;
					    u_xlat16_1.x = u_xlat16_1.x * 0.800000012 + u_xlat16_13;
					    u_xlat16_1.x = u_xlat16_7.x * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_19 * 0.675000012 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_21 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_4 * 0.5 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_10 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_16 * 0.200000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_22 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_5 * 0.075000003 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + 9.99999975e-05;
					    u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat2.w<0.00999999978);
					#else
					    u_xlatb0 = u_xlat2.w<0.00999999978;
					#endif
					    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat2.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1665845
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec4 u_xlat2;
					lowp vec4 u_xlat10_2;
					lowp vec4 u_xlat10_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_1 = texture2DLodEXT(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture2DLodEXT(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat10_2 = texture2DLodEXT(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat10_1 + u_xlat10_3;
					    u_xlat16_0 = u_xlat10_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat10_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_1 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat16_0 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat2 = (-_MainTex_TexelSize.xyxy) * vec4(0.75, 0.75, 0.75, -0.75) + vs_TEXCOORD1.xyxy;
					    u_xlat16_3 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat16_2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat16_1 = u_xlat16_1 + u_xlat16_3;
					    u_xlat16_0 = u_xlat16_0 + u_xlat16_1;
					    u_xlat16_0 = u_xlat16_2 + u_xlat16_0;
					    SV_Target0 = u_xlat16_0 * vec4(0.25, 0.25, 0.25, 0.25);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1757937
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat10_2);
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump float u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).w;
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_2, 0.0);
					    SV_Target0.yw = vec2(u_xlat16_2);
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).w;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).w;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1800691
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					lowp float u_xlat10_0;
					mediump float u_xlat16_1;
					lowp vec2 u_xlat10_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat10_2.xy = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat10_2.x, 0.0);
					    SV_Target0.yw = u_xlat10_2.yy;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat10_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	vec4 _Offsets;
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0 = _Offsets.xyxy * vec4(1.0, 1.0, -1.0, -1.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD1 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(2.0, 2.0, -2.0, -2.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD2 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(3.0, 3.0, -3.0, -3.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD3 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(4.0, 4.0, -4.0, -4.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD4 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    u_xlat0 = _Offsets.xyxy * vec4(5.0, 5.0, -5.0, -5.0);
					    u_xlat0 = u_xlat0 * _MainTex_TexelSize.xyxy;
					    vs_TEXCOORD5 = u_xlat0 * vec4(0.166666672, 0.166666672, 0.166666672, 0.166666672) + in_TEXCOORD0.xyxy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					in highp vec4 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump float u_xlat16_0;
					mediump float u_xlat16_1;
					mediump vec2 u_xlat16_2;
					mediump float u_xlat16_3;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.zw, 0.0).x;
					    u_xlat16_2.xy = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_1 = min(u_xlat16_2.x, 0.0);
					    SV_Target0.yw = u_xlat16_2.yy;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD1.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD2.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.800000012;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD3.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.600000024;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD4.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.400000006;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.xy, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    u_xlat16_1 = min(u_xlat16_3, u_xlat16_1);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD5.zw, 0.0).x;
					    u_xlat16_3 = u_xlat16_0 * 0.25;
					    SV_Target0.xz = min(vec2(u_xlat16_3), vec2(u_xlat16_1));
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1838474
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture2D(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture2D(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture2D(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture2D(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat10_3.xyz = texture2DLodEXT(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat10_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture2D(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture2D(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture2D(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture2D(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat10_3.xyz = texture2DLodEXT(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat10_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					varying highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec2 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture2D(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture2D(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture2D(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture2D(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat10_3.xyz = texture2DLodEXT(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat10_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat1<_BlurCoe.z);
					#else
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					#endif
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat5<_BlurCoe.z);
					#else
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(u_xlat3<_BlurCoe.z);
					#else
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(u_xlat7<_BlurCoe.z);
					#else
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(abs(u_xlat16_0.x)<abs(u_xlat16_0.y));
					#else
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					#endif
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat1<_BlurCoe.z);
					#else
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					#endif
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat5<_BlurCoe.z);
					#else
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(u_xlat3<_BlurCoe.z);
					#else
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(u_xlat7<_BlurCoe.z);
					#else
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(abs(u_xlat16_0.x)<abs(u_xlat16_0.y));
					#else
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					#endif
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					highp  vec4 phase0_Output0_1;
					out highp vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    phase0_Output0_1 = in_TEXCOORD0.xyxy;
					vs_TEXCOORD0 = phase0_Output0_1.xy;
					vs_TEXCOORD1 = phase0_Output0_1.zw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec2 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					bvec2 u_xlatb3;
					mediump float u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_6;
					float u_xlat7;
					bool u_xlatb9;
					bool u_xlatb11;
					void main()
					{
					    u_xlat16_0 = _MainTex_TexelSize.xyxy * vec4(-0.25, 0.25, 0.25, 0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat16_0.xy).x;
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat16_0.zw).x;
					    u_xlat5 = _ZBufferParams.x * u_xlat5 + _ZBufferParams.y;
					    u_xlat5 = float(1.0) / u_xlat5;
					    u_xlat1 = _ZBufferParams.x * u_xlat1 + _ZBufferParams.y;
					    u_xlat1 = float(1.0) / u_xlat1;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat1<_BlurCoe.z);
					#else
					    u_xlatb9 = u_xlat1<_BlurCoe.z;
					#endif
					    u_xlat16_0.xy = _BlurParams.zx * vec2(u_xlat1) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_0.y, -1.0);
					    u_xlat16_0.x = u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.x = (u_xlatb9) ? u_xlat16_4 : u_xlat16_0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat5<_BlurCoe.z);
					#else
					    u_xlatb1 = u_xlat5<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat5) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.y = (u_xlatb1) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = _MainTex_TexelSize.xyxy * vec4(0.25, -0.25, -0.25, -0.25) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat16_1.xy).x;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat16_1.zw).x;
					    u_xlat7 = _ZBufferParams.x * u_xlat7 + _ZBufferParams.y;
					    u_xlat7 = float(1.0) / u_xlat7;
					    u_xlat3 = _ZBufferParams.x * u_xlat3 + _ZBufferParams.y;
					    u_xlat3 = float(1.0) / u_xlat3;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(u_xlat3<_BlurCoe.z);
					#else
					    u_xlatb11 = u_xlat3<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat3) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.z = (u_xlatb11) ? u_xlat16_6 : u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(u_xlat7<_BlurCoe.z);
					#else
					    u_xlatb3.x = u_xlat7<_BlurCoe.z;
					#endif
					    u_xlat16_2.xy = _BlurParams.zx * vec2(u_xlat7) + _BlurParams.wy;
					    u_xlat16_6 = max(u_xlat16_2.y, -1.0);
					    u_xlat16_2.x = u_xlat16_2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_6 = min(u_xlat16_6, 0.0);
					    u_xlat16_0.w = (u_xlatb3.x) ? u_xlat16_6 : u_xlat16_2.x;
					    u_xlat16_1 = abs(u_xlat16_0) * abs(u_xlat16_0);
					    u_xlat16_2.xyz = abs(u_xlat16_0.xyz) * u_xlat16_1.xyz;
					    u_xlat16_3.xy = u_xlat16_2.xx * vec2(-1.0, 1.0) + u_xlat16_2.yy;
					    u_xlat16_3.xy = u_xlat16_2.zz * vec2(1.0, -1.0) + u_xlat16_3.xy;
					    u_xlat16_3.xy = (-u_xlat16_1.ww) * abs(u_xlat16_0.ww) + u_xlat16_3.xy;
					    u_xlat16_2.xy = min(u_xlat16_3.xy, vec2(1.0, 1.0));
					    u_xlat16_2.xy = u_xlat16_2.xy * _MainTex_TexelSize.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat16_2.xy, 0.0).xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz;
					    u_xlatb3.xy = lessThan(abs(u_xlat16_0.xzxx), abs(u_xlat16_0.ywyy)).xy;
					    {
					        vec4 hlslcc_movcTemp = u_xlat16_0;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat16_0.z : u_xlat16_0.w;
					        u_xlat16_0 = hlslcc_movcTemp;
					    }
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3.x = !!(abs(u_xlat16_0.x)<abs(u_xlat16_0.y));
					#else
					    u_xlatb3.x = abs(u_xlat16_0.x)<abs(u_xlat16_0.y);
					#endif
					    SV_Target0.w = (u_xlatb3.x) ? u_xlat16_0.x : u_xlat16_0.y;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1919885
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					    u_xlatb2 = u_xlat16_0.z<0.0;
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					bool u_xlatb2;
					bool u_xlatb3;
					mediump float u_xlat16_4;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4 = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4 = min(u_xlat16_4, 0.0);
					    u_xlat16_0.yz = (bool(u_xlatb3)) ? vec2(u_xlat16_4) : u_xlat16_1.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_0.z<0.0);
					#else
					    u_xlatb2 = u_xlat16_0.z<0.0;
					#endif
					    u_xlat16_1.xy = (-u_xlat16_0.zz);
					    u_xlat16_1.z = float(0.0);
					    u_xlat16_1.w = float(1.0);
					    u_xlat16_0.x = float(0.0);
					    u_xlat16_0.w = float(1.0);
					    SV_Target0 = (bool(u_xlatb2)) ? u_xlat16_1 : u_xlat16_0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1976904
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					lowp float u_xlat10_5;
					ivec2 u_xlati6;
					lowp vec3 u_xlat10_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat10_0.w<0.0;
					    u_xlat16_2.xy = u_xlat10_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat10_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat10_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat10_8.xyz = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					        u_xlati6.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat10_5 = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat10_0.w * u_xlat10_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat10_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					lowp float u_xlat10_5;
					ivec2 u_xlati6;
					lowp vec3 u_xlat10_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat10_0.w<0.0;
					    u_xlat16_2.xy = u_xlat10_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat10_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat10_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat10_8.xyz = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					        u_xlati6.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat10_5 = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat10_0.w * u_xlat10_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat10_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					lowp float u_xlat10_5;
					ivec2 u_xlati6;
					lowp vec3 u_xlat10_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlatb1 = u_xlat10_0.w<0.0;
					    u_xlat16_2.xy = u_xlat10_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					    if(u_xlatb1){
					        SV_Target0 = u_xlat10_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat10_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat10_8.xyz = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					        u_xlati6.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat10_5 = texture2DLodEXT(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat10_0.w * u_xlat10_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat10_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_0.w<0.0);
					#else
					    u_xlatb1 = u_xlat16_0.w<0.0;
					#endif
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_2.x<0.0606060587);
					#else
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					#endif
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_0.w<0.0);
					#else
					    u_xlatb1 = u_xlat16_0.w<0.0;
					#endif
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_2.x<0.0606060587);
					#else
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					#endif
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[9];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec2 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec2 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_5;
					ivec2 u_xlati6;
					mediump vec3 u_xlat16_8;
					bool u_xlatb8;
					mediump float u_xlat16_16;
					vec2 u_xlat19;
					ivec2 u_xlati19;
					mediump float u_xlat16_23;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.0128836902, 0.541606903);
						ImmCB_0_0_0[1] = vec2(-0.919279814, -0.0952936411);
						ImmCB_0_0_0[2] = vec2(0.7596578, 0.192273796);
						ImmCB_0_0_0[3] = vec2(-0.141320005, -0.288024187);
						ImmCB_0_0_0[4] = vec2(-0.524933279, 0.777763784);
						ImmCB_0_0_0[5] = vec2(-0.587169528, -0.740356922);
						ImmCB_0_0_0[6] = vec2(0.320219606, -0.644226789);
						ImmCB_0_0_0[7] = vec2(0.855321407, -0.392098188);
						ImmCB_0_0_0[8] = vec2(0.582770824, 0.759929717);
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_0.w<0.0);
					#else
					    u_xlatb1 = u_xlat16_0.w<0.0;
					#endif
					    u_xlat16_2.xy = u_xlat16_0.ww * _BlurCoe.xy;
					    u_xlat16_2.x = (u_xlatb1) ? (-u_xlat16_2.x) : u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_2.x<0.0606060587);
					#else
					    u_xlatb1 = u_xlat16_2.x<0.0606060587;
					#endif
					    if(u_xlatb1){
					        SV_Target0 = u_xlat16_0;
					        return;
					    }
					    u_xlat16_2.x = u_xlat16_2.x * 0.165000007;
					    u_xlat16_2.xy = u_xlat16_2.xx * _MainTex_TexelSize.xy;
					    u_xlat16_3.xyz = u_xlat16_0.xyz;
					    u_xlat16_16 = 1.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<9 ; u_xlati_loop_1++)
					    {
					        u_xlat16_4.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_2.xy + vs_TEXCOORD0.xy;
					        u_xlat16_8.xyz = textureLod(_MainTex, u_xlat16_4.xy, 0.0).xyz;
					        u_xlat5.xy = u_xlat16_4.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					        u_xlat5.xy = floor(u_xlat5.xy);
					        u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
					        u_xlati19.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					        u_xlati6.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					        u_xlati19.xy = (-u_xlati19.xy) + u_xlati6.xy;
					        u_xlat19.xy = vec2(u_xlati19.xy);
					        u_xlat5.xy = u_xlat19.xy * vec2(0.5, 0.5) + u_xlat5.xy;
					        u_xlat16_4.xy = u_xlat5.xy * _MainTex_TexelSize.xy;
					        u_xlat16_5 = textureLod(_MainTex, u_xlat16_4.xy, 0.0).w;
					        u_xlat16_23 = u_xlat16_0.w * u_xlat16_5;
					        u_xlat16_23 = max(u_xlat16_23, 0.0);
					        u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					        u_xlat16_16 = u_xlat16_23 + u_xlat16_16;
					    }
					    SV_Target0.xyz = u_xlat16_3.xyz / vec3(u_xlat16_16);
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2079561
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2146986
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1++)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2177226
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					lowp vec3 u_xlat10_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_13.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat10_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec2 u_xlat16_1;
					int u_xlati2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump float u_xlat16_12;
					mediump vec3 u_xlat16_13;
					bool u_xlatb13;
					mediump vec2 u_xlat16_23;
					mediump float u_xlat16_25;
					mediump vec2 u_xlat16_30;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_34;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_23.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_23.xy = u_xlat16_1.xy * vec2(0.5, 0.5);
					    u_xlat16_23.x = max(u_xlat16_23.x, u_xlat16_23.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_23.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_23.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_3.xy = u_xlat16_23.xx * _MainTex_TexelSize.xy;
					        u_xlat16_34 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_34);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.5, 0.5) + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_23.xx / u_xlat16_1.xy;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_23.x = u_xlat16_34;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_13.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_8.xy = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.xy = min(max(u_xlat16_8.xy, 0.0), 1.0);
					#else
					            u_xlat16_8.xy = clamp(u_xlat16_8.xy, 0.0, 1.0);
					#endif
					            u_xlat16_30.xy = u_xlat16_8.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_8.xy = u_xlat16_8.xy * u_xlat16_8.xy;
					            u_xlat16_8.xy = (-u_xlat16_30.xy) * u_xlat16_8.xy + vec2(1.0, 1.0);
					            u_xlat16_39 = u_xlat16_37 * u_xlat16_8.x;
					            u_xlat16_40 = u_xlat16_38 * u_xlat16_8.y;
					            u_xlat16_23.x = u_xlat16_37 * u_xlat16_8.x + u_xlat16_23.x;
					            u_xlat16_6.xyz = u_xlat16_13.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.y + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(u_xlat16_40) + u_xlat16_7.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_23.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_1.xxx;
					        u_xlat16_1.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					        u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					        u_xlat16_12 = u_xlat16_23.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_12 = min(max(u_xlat16_12, 0.0), 1.0);
					#else
					        u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_1.x = max(u_xlat16_12, u_xlat16_34);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_12;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2248760
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump float u_xlat16_1;
					lowp float u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					lowp float u_xlat10_9;
					ivec2 u_xlati10;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					#define UNITY_DYNAMIC_INDEX_ES2 0
					
					
					
					
					vec2 ImmCB_0_0_0DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_0[i];
					#else
					#define d_ar ImmCB_0_0_0
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					
					float ImmCB_0_0_2DynamicIndex(int i){
					#if UNITY_DYNAMIC_INDEX_ES2
					    return ImmCB_0_0_2[i];
					#else
					#define d_ar ImmCB_0_0_2
					    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return d_ar[31]; else if (i == 32) return d_ar[32]; else if (i == 33) return d_ar[33]; else if (i == 34) return d_ar[34]; else if (i == 35) return d_ar[35]; else if (i == 36) return d_ar[36]; else if (i == 37) return d_ar[37]; else if (i == 38) return d_ar[38]; else if (i == 39) return d_ar[39]; else if (i == 40) return d_ar[40]; else if (i == 41) return d_ar[41]; else if (i == 42) return d_ar[42]; else if (i == 43) return d_ar[43]; else if (i == 44) return d_ar[44]; else if (i == 45) return d_ar[45]; else if (i == 46) return d_ar[46]; else if (i == 47) return d_ar[47];
					    return d_ar[0];
					#undef d_ar
					#endif
					}
					
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat10_1 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat10_0.w, u_xlat10_1);
					    u_xlat16_2.x = u_xlat10_0.w * 1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat10_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat10_12.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(ImmCB_0_0_0DynamicIndex(u_xlati_loop_1).xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_9 = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat10_9), 0.0);
					            u_xlat16_38 = (-u_xlat10_0.w) + u_xlat10_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat10_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.z + -1.0;
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2DynamicIndex(u_xlati_loop_1) * u_xlat16_2.x + -1.0;
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat10_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat10_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat10_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					vec2 ImmCB_0_0_0[48];
					float ImmCB_0_0_2[48];
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump float u_xlat16_1;
					int u_xlati1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					mediump float u_xlat16_9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_19;
					mediump float u_xlat16_24;
					mediump float u_xlat16_25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					mediump float u_xlat16_40;
					void main()
					{
						ImmCB_0_0_0[0] = vec2(0.991439998, 0.13053);
						ImmCB_0_0_0[1] = vec2(0.923879981, 0.382679999);
						ImmCB_0_0_0[2] = vec2(0.793349981, 0.608759999);
						ImmCB_0_0_0[3] = vec2(0.608759999, 0.793349981);
						ImmCB_0_0_0[4] = vec2(0.382679999, 0.923879981);
						ImmCB_0_0_0[5] = vec2(0.13053, 0.991439998);
						ImmCB_0_0_0[6] = vec2(-0.13053, 0.991439998);
						ImmCB_0_0_0[7] = vec2(-0.382679999, 0.923879981);
						ImmCB_0_0_0[8] = vec2(-0.608759999, 0.793349981);
						ImmCB_0_0_0[9] = vec2(-0.793349981, 0.608759999);
						ImmCB_0_0_0[10] = vec2(-0.923879981, 0.382679999);
						ImmCB_0_0_0[11] = vec2(-0.991439998, 0.13053);
						ImmCB_0_0_0[12] = vec2(-0.991439998, -0.13053);
						ImmCB_0_0_0[13] = vec2(-0.923879981, -0.382679999);
						ImmCB_0_0_0[14] = vec2(-0.793349981, -0.608759999);
						ImmCB_0_0_0[15] = vec2(-0.608759999, -0.793349981);
						ImmCB_0_0_0[16] = vec2(-0.382679999, -0.923879981);
						ImmCB_0_0_0[17] = vec2(-0.13053, -0.991439998);
						ImmCB_0_0_0[18] = vec2(0.13053, -0.991439998);
						ImmCB_0_0_0[19] = vec2(0.382679999, -0.923879981);
						ImmCB_0_0_0[20] = vec2(0.608759999, -0.793349981);
						ImmCB_0_0_0[21] = vec2(0.793349981, -0.608759999);
						ImmCB_0_0_0[22] = vec2(0.923879981, -0.382679999);
						ImmCB_0_0_0[23] = vec2(0.991439998, -0.13053);
						ImmCB_0_0_0[24] = vec2(0.647319973, 0.128759995);
						ImmCB_0_0_0[25] = vec2(0.54877001, 0.366679996);
						ImmCB_0_0_0[26] = vec2(0.366679996, 0.54877001);
						ImmCB_0_0_0[27] = vec2(0.128759995, 0.647319973);
						ImmCB_0_0_0[28] = vec2(-0.128759995, 0.647319973);
						ImmCB_0_0_0[29] = vec2(-0.366679996, 0.54877001);
						ImmCB_0_0_0[30] = vec2(-0.54877001, 0.366679996);
						ImmCB_0_0_0[31] = vec2(-0.647319973, 0.128759995);
						ImmCB_0_0_0[32] = vec2(-0.647319973, -0.128759995);
						ImmCB_0_0_0[33] = vec2(-0.54877001, -0.366679996);
						ImmCB_0_0_0[34] = vec2(-0.366679996, -0.54877001);
						ImmCB_0_0_0[35] = vec2(-0.128759995, -0.647319973);
						ImmCB_0_0_0[36] = vec2(0.128759995, -0.647319973);
						ImmCB_0_0_0[37] = vec2(0.366679996, -0.54877001);
						ImmCB_0_0_0[38] = vec2(0.54877001, -0.366679996);
						ImmCB_0_0_0[39] = vec2(0.647319973, -0.128759995);
						ImmCB_0_0_0[40] = vec2(0.304879993, 0.126289994);
						ImmCB_0_0_0[41] = vec2(0.126289994, 0.304879993);
						ImmCB_0_0_0[42] = vec2(-0.126289994, 0.304879993);
						ImmCB_0_0_0[43] = vec2(-0.304879993, 0.126289994);
						ImmCB_0_0_0[44] = vec2(-0.304879993, -0.126289994);
						ImmCB_0_0_0[45] = vec2(-0.126289994, -0.304879993);
						ImmCB_0_0_0[46] = vec2(0.126289994, -0.304879993);
						ImmCB_0_0_0[47] = vec2(0.304879993, -0.126289994);
						ImmCB_0_0_2[0] = 1.0;
						ImmCB_0_0_2[1] = 1.0;
						ImmCB_0_0_2[2] = 1.0;
						ImmCB_0_0_2[3] = 1.0;
						ImmCB_0_0_2[4] = 1.0;
						ImmCB_0_0_2[5] = 1.0;
						ImmCB_0_0_2[6] = 1.0;
						ImmCB_0_0_2[7] = 1.0;
						ImmCB_0_0_2[8] = 1.0;
						ImmCB_0_0_2[9] = 1.0;
						ImmCB_0_0_2[10] = 1.0;
						ImmCB_0_0_2[11] = 1.0;
						ImmCB_0_0_2[12] = 1.0;
						ImmCB_0_0_2[13] = 1.0;
						ImmCB_0_0_2[14] = 1.0;
						ImmCB_0_0_2[15] = 1.0;
						ImmCB_0_0_2[16] = 1.0;
						ImmCB_0_0_2[17] = 1.0;
						ImmCB_0_0_2[18] = 1.0;
						ImmCB_0_0_2[19] = 1.0;
						ImmCB_0_0_2[20] = 1.0;
						ImmCB_0_0_2[21] = 1.0;
						ImmCB_0_0_2[22] = 1.0;
						ImmCB_0_0_2[23] = 1.0;
						ImmCB_0_0_2[24] = 0.660000026;
						ImmCB_0_0_2[25] = 0.660000026;
						ImmCB_0_0_2[26] = 0.660000026;
						ImmCB_0_0_2[27] = 0.660000026;
						ImmCB_0_0_2[28] = 0.660000026;
						ImmCB_0_0_2[29] = 0.660000026;
						ImmCB_0_0_2[30] = 0.660000026;
						ImmCB_0_0_2[31] = 0.660000026;
						ImmCB_0_0_2[32] = 0.660000026;
						ImmCB_0_0_2[33] = 0.660000026;
						ImmCB_0_0_2[34] = 0.660000026;
						ImmCB_0_0_2[35] = 0.660000026;
						ImmCB_0_0_2[36] = 0.660000026;
						ImmCB_0_0_2[37] = 0.660000026;
						ImmCB_0_0_2[38] = 0.660000026;
						ImmCB_0_0_2[39] = 0.660000026;
						ImmCB_0_0_2[40] = 0.330000013;
						ImmCB_0_0_2[41] = 0.330000013;
						ImmCB_0_0_2[42] = 0.330000013;
						ImmCB_0_0_2[43] = 0.330000013;
						ImmCB_0_0_2[44] = 0.330000013;
						ImmCB_0_0_2[45] = 0.330000013;
						ImmCB_0_0_2[46] = 0.330000013;
						ImmCB_0_0_2[47] = 0.330000013;
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).x;
					    u_xlat16_1 = min(u_xlat16_0.w, u_xlat16_1);
					    u_xlat16_2.x = u_xlat16_0.w * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_13.x = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_13.x;
					    u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.y;
					    u_xlat16_24 = u_xlat16_1 * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_24 * -2.0 + 3.0;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_35;
					    u_xlat16_2.z = u_xlat16_24 * _BlurCoe.x;
					    u_xlat16_13.xz = u_xlat16_2.xz * vec2(0.5, 0.5);
					    u_xlat16_13.x = max(u_xlat16_13.z, u_xlat16_13.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_13.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_13.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_3.xy = u_xlat16_13.xx * _MainTex_TexelSize.xy;
					        u_xlat16_35 = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_25 = max(u_xlat16_0.w, 0.0);
					        u_xlat16_4.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					        u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(u_xlat16_25);
					        u_xlat16_2.z = u_xlat16_2.z * 0.5 + 0.00999999978;
					        u_xlat16_2.x = u_xlat16_2.x * 0.5 + 0.00999999978;
					        u_xlat16_2.xz = u_xlat16_13.xx / u_xlat16_2.xz;
					        u_xlat16_6.xyz = u_xlat16_4.xyz;
					        u_xlat16_7.xyz = u_xlat16_5.xyz;
					        u_xlat16_13.x = u_xlat16_35;
					        u_xlat16_36 = u_xlat16_25;
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<48 ; u_xlati_loop_1 = u_xlati_loop_1 + 2)
					        {
					            u_xlat16_8.xy = ImmCB_0_0_0[u_xlati_loop_1].xy * u_xlat16_3.xy + vs_TEXCOORD0.xy;
					            u_xlat16_12.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), ImmCB_0_0_0[u_xlati_loop_1].xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(ImmCB_0_0_0[u_xlati_loop_1].xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_8.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_9 = textureLod(_MainTex, u_xlat16_8.xy, 0.0).w;
					            u_xlat16_37 = max((-u_xlat16_9), 0.0);
					            u_xlat16_38 = (-u_xlat16_0.w) + u_xlat16_9;
					            u_xlat16_38 = abs(u_xlat16_38) * -0.5;
					            u_xlat16_38 = u_xlat16_38 * ImmCB_0_0_2[u_xlati_loop_1] + 1.0;
					            u_xlat16_38 = max(u_xlat16_38, 0.0);
					            u_xlat16_39 = max(u_xlat16_9, 0.0);
					            u_xlat16_38 = u_xlat16_38 * u_xlat16_39;
					            u_xlat16_39 = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.z + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
					#else
					            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					#endif
					            u_xlat16_40 = u_xlat16_39 * -2.0 + 3.0;
					            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
					            u_xlat16_39 = (-u_xlat16_40) * u_xlat16_39 + 1.0;
					            u_xlat16_40 = u_xlat16_37 * u_xlat16_39;
					            u_xlat16_8.x = ImmCB_0_0_2[u_xlati_loop_1] * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_8.x = min(max(u_xlat16_8.x, 0.0), 1.0);
					#else
					            u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);
					#endif
					            u_xlat16_19 = u_xlat16_8.x * -2.0 + 3.0;
					            u_xlat16_8.x = u_xlat16_8.x * u_xlat16_8.x;
					            u_xlat16_8.x = (-u_xlat16_19) * u_xlat16_8.x + 1.0;
					            u_xlat16_19 = u_xlat16_38 * u_xlat16_8.x;
					            u_xlat16_13.x = u_xlat16_37 * u_xlat16_39 + u_xlat16_13.x;
					            u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat16_40) + u_xlat16_6.xyz;
					            u_xlat16_36 = u_xlat16_38 * u_xlat16_8.x + u_xlat16_36;
					            u_xlat16_7.xyz = u_xlat16_12.xyz * vec3(u_xlat16_19) + u_xlat16_7.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_13.x + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_6.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_7.xyz / u_xlat16_2.xxx;
					        u_xlat16_2.x = u_xlat16_36 * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					        u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					        u_xlat16_13.x = u_xlat16_13.x * 0.0408163257;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_13.x = min(max(u_xlat16_13.x, 0.0), 1.0);
					#else
					        u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = u_xlat16_2.xxx * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_2.x = max(u_xlat16_13.x, u_xlat16_35);
					        u_xlat16_3.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + u_xlat16_4.xyz;
					        SV_Target0.w = u_xlat16_13.x;
					    } else {
					        SV_Target0.xyz = u_xlat16_0.xyz;
					        SV_Target0.w = 0.0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2308546
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat10_0 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat10_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat10_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat10_0 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat10_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat10_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _CameraDepthTexture;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					lowp vec4 u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat10_0 = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat10_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					    u_xlat10_2 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat10_0.xyz + (-u_xlat10_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat10_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat10_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(1.0<u_xlat16_4.x);
					#else
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					#endif
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat16_1.x<0.00999999978);
					#else
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(1.0<u_xlat16_4.x);
					#else
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					#endif
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat16_1.x<0.00999999978);
					#else
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	mediump vec4 _BlurParams;
					UNITY_LOCATION(0) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(2) uniform highp sampler2D _CameraDepthTexture;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					mediump vec4 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy).x;
					    u_xlat0 = _ZBufferParams.x * u_xlat0 + _ZBufferParams.y;
					    u_xlat0 = float(1.0) / u_xlat0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat0<_BlurCoe.z);
					#else
					    u_xlatb3 = u_xlat0<_BlurCoe.z;
					#endif
					    u_xlat16_1.xy = _BlurParams.zx * vec2(u_xlat0) + _BlurParams.wy;
					    u_xlat16_4.x = max(u_xlat16_1.y, -1.0);
					    u_xlat16_1.x = u_xlat16_1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = min(u_xlat16_4.x, 0.0);
					    u_xlat16_1.x = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_1.x;
					    u_xlat16_4.x = u_xlat16_1.x * _BlurCoe.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(1.0<u_xlat16_4.x);
					#else
					    u_xlatb0 = 1.0<u_xlat16_4.x;
					#endif
					    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_1.x : 0.0;
					    u_xlat16_0 = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.x = max(u_xlat16_0.w, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_1.x * 3.030303;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = u_xlat16_1.x * -2.0 + 3.0;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_4.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb9 = !!(u_xlat16_1.x<0.00999999978);
					#else
					    u_xlatb9 = u_xlat16_1.x<0.00999999978;
					#endif
					    u_xlat16_2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_4.xyz = u_xlat16_0.xyz + (-u_xlat16_2.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = (bool(u_xlatb9)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_2.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2388619
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.200000003;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.400000006 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2440451
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2537226
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.200000003;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2601842
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.200000003;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.400000006 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.333333343;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2630486
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.100000001;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.200000003 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2709178
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2787254
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.100000001;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2844681
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<11 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.100000001;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.200000003 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.181818187;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2914934
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					lowp vec3 u_xlat10_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					lowp float u_xlat10_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat10_6.xyz = texture2DLodEXT(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * -1);
					            u_xlati9.xy = ivec2(ivec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat10_32 = texture2DLodEXT(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat10_0.w) + u_xlat10_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat10_32), 0.0);
					            u_xlat16_35 = max(u_xlat10_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat10_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat10_0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat10_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat10_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat10_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec2 u_xlat2;
					bool u_xlatb2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					vec2 u_xlat6;
					mediump vec3 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					vec2 u_xlat8;
					ivec2 u_xlati9;
					mediump vec2 u_xlat16_15;
					mediump vec2 u_xlat16_21;
					int u_xlati22;
					vec2 u_xlat28;
					ivec2 u_xlati28;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					bool u_xlatb32;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat16_1.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.xy = min(max(u_xlat16_1.xy, 0.0), 1.0);
					#else
					    u_xlat16_1.xy = clamp(u_xlat16_1.xy, 0.0, 1.0);
					#endif
					    u_xlat16_21.xy = u_xlat16_1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_1.xy;
					    u_xlat16_1.xy = u_xlat16_1.xy * u_xlat16_21.xy;
					    u_xlat16_21.xy = u_xlat16_1.xy * _BlurCoe.xy;
					    u_xlat16_21.x = max(u_xlat16_21.x, u_xlat16_21.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(u_xlat16_21.x>=0.00999999978);
					#else
					    u_xlatb2 = u_xlat16_21.x>=0.00999999978;
					#endif
					    if(u_xlatb2){
					        u_xlat16_1.xy = u_xlat16_1.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_1.xy = u_xlat16_21.xx / u_xlat16_1.xy;
					        u_xlat16_21.xy = u_xlat16_21.xx * _MainTex_TexelSize.xy;
					        u_xlat2.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_33 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_34 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_5.x = float(u_xlati_loop_1);
					            u_xlat16_15.x = u_xlat16_5.x * 0.0666666701;
					            u_xlat6.xy = u_xlat16_15.xx * u_xlat2.xy + _Offsets.xy;
					            u_xlat16_15.xy = u_xlat16_21.xy * u_xlat6.xy;
					            u_xlat16_7.xy = u_xlat6.xy * u_xlat16_21.xy + vs_TEXCOORD0.xy;
					            u_xlat16_6.xyz = textureLod(_MainTex, u_xlat16_7.xy, 0.0).xyz;
					            u_xlat8.xy = u_xlat16_7.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat8.xy = floor(u_xlat8.xy);
					            u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
					            u_xlati28.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_15.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati9.xy = ivec2(uvec2(lessThan(u_xlat16_15.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati28.xy = (-u_xlati28.xy) + u_xlati9.xy;
					            u_xlat28.xy = vec2(u_xlati28.xy);
					            u_xlat8.xy = u_xlat28.xy * vec2(0.5, 0.5) + u_xlat8.xy;
					            u_xlat16_15.xy = u_xlat8.xy * _MainTex_TexelSize.xy;
					            u_xlat16_32 = textureLod(_MainTex, u_xlat16_15.xy, 0.0).w;
					            u_xlat16_5.x = u_xlat16_5.x * 0.13333334 + -1.0;
					            u_xlat16_15.x = (-u_xlat16_0.w) + u_xlat16_32;
					            u_xlat16_15.x = abs(u_xlat16_15.x) * abs(u_xlat16_5.x);
					            u_xlat16_15.x = u_xlat16_15.x * -0.5 + 1.0;
					            u_xlat16_15.x = max(u_xlat16_15.x, 0.0);
					            u_xlat16_15.y = max((-u_xlat16_32), 0.0);
					            u_xlat16_35 = max(u_xlat16_32, 0.0);
					            u_xlat16_15.x = u_xlat16_15.x * u_xlat16_35;
					            u_xlat16_5.xw = abs(u_xlat16_5.xx) * u_xlat16_1.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_5.xw = min(max(u_xlat16_5.xw, 0.0), 1.0);
					#else
					            u_xlat16_5.xw = clamp(u_xlat16_5.xw, 0.0, 1.0);
					#endif
					            u_xlat16_7.xy = u_xlat16_5.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_5.xw = u_xlat16_5.xw * u_xlat16_5.xw;
					            u_xlat16_5.xw = (-u_xlat16_7.xy) * u_xlat16_5.xw + vec2(1.0, 1.0);
					            u_xlat16_7.xy = u_xlat16_5.xw * u_xlat16_15.yx;
					            u_xlat16_33 = u_xlat16_15.y * u_xlat16_5.x + u_xlat16_33;
					            u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_34 = u_xlat16_15.x * u_xlat16_5.w + u_xlat16_34;
					            u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_1.x = u_xlat16_33 + 9.99999975e-05;
					        u_xlat16_1.xyz = u_xlat16_3.xyz / u_xlat16_1.xxx;
					        u_xlat16_31 = u_xlat16_34 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_31);
					        u_xlat16_31 = u_xlat16_34 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					        u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					        u_xlat16_33 = u_xlat16_33 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_31) * u_xlat16_3.xyz + u_xlat16_0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_4.x = max(u_xlat16_33, u_xlat16_4.x);
					        u_xlat16_1.xyz = u_xlat16_1.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_1.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz + u_xlat16_3.xyz;
					        u_xlat16_31 = u_xlat16_31 + u_xlat16_33;
					        u_xlat16_31 = min(u_xlat16_31, 1.0);
					        u_xlat16_1.xyz = (-u_xlat16_0.xyz) + u_xlat16_1.xyz;
					        u_xlat16_1.xyz = vec3(u_xlat16_31) * u_xlat16_1.xyz + u_xlat16_0.xyz;
					    } else {
					        u_xlat16_1.xyz = u_xlat16_0.xyz;
					    }
					    SV_Target0.xyz = u_xlat16_1.xyz;
					    SV_Target0.w = u_xlat16_0.w;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 2979065
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec2 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10 = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec2 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump float u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10 = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10 * -2.0 + 3.0;
					    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;
					    u_xlat16_2.y = u_xlat16_10 * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_26 = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_26 = min(u_xlat16_26, 1.0);
					        u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat16_2.xyz;
					        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_2.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 3037650
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					lowp vec3 u_xlat10_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					lowp float u_xlat10_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat10_0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat10_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat10_0.ww * vec2(-1.17647052, 1.17647052);
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat10_7.xyz = texture2DLodEXT(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(ivec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * -1);
					            u_xlati10.xy = ivec2(ivec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * -1);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat10_36 = texture2DLodEXT(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat10_0.w) + u_xlat10_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat10_36), 0.0);
					            u_xlat16_39 = max(u_xlat10_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat10_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat10_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					        u_xlat16_4.xyz = (-u_xlat10_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat10_0.xyz;
					        u_xlat16_5.x = max((-u_xlat10_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat10_3.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat10_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat10_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat10_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat10_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					vec2 u_xlat7;
					mediump vec3 u_xlat16_7;
					mediump vec2 u_xlat16_8;
					vec2 u_xlat9;
					ivec2 u_xlati10;
					mediump vec3 u_xlat16_13;
					mediump vec2 u_xlat16_17;
					mediump vec2 u_xlat16_24;
					int u_xlati25;
					vec2 u_xlat31;
					ivec2 u_xlati31;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					bool u_xlatb36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					mediump float u_xlat16_39;
					void main()
					{
					    u_xlat16_0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.w = u_xlat16_0.w * _Offsets.z;
					    u_xlat16_2.xy = u_xlat16_0.ww * vec2(-1.17647052, 1.17647052);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.xy = min(max(u_xlat16_2.xy, 0.0), 1.0);
					#else
					    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);
					#endif
					    u_xlat16_24.xy = u_xlat16_2.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_2.xy;
					    u_xlat16_2.xy = u_xlat16_2.xy * u_xlat16_24.xy;
					    u_xlat16_24.xy = u_xlat16_2.xy * _BlurCoe.xy;
					    u_xlat16_24.x = max(u_xlat16_24.x, u_xlat16_24.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(u_xlat16_24.x>=0.00999999978);
					#else
					    u_xlatb3 = u_xlat16_24.x>=0.00999999978;
					#endif
					    if(u_xlatb3){
					        u_xlat16_2.xy = u_xlat16_2.xy * _BlurCoe.xy + vec2(0.00999999978, 0.00999999978);
					        u_xlat16_2.xy = u_xlat16_24.xx / u_xlat16_2.xy;
					        u_xlat16_24.xy = u_xlat16_24.xx * _MainTex_TexelSize.xy;
					        u_xlat3.xy = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_37 = float(0.00100000005);
					        u_xlat16_5.x = float(0.0);
					        u_xlat16_5.y = float(0.0);
					        u_xlat16_5.z = float(0.0);
					        u_xlat16_38 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_17.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat7.xy = u_xlat16_17.xx * u_xlat3.xy + _Offsets.xy;
					            u_xlat16_17.xy = u_xlat16_24.xy * u_xlat7.xy;
					            u_xlat16_8.xy = u_xlat7.xy * u_xlat16_24.xy + vs_TEXCOORD0.xy;
					            u_xlat16_7.xyz = textureLod(_MainTex, u_xlat16_8.xy, 0.0).xyz;
					            u_xlat9.xy = u_xlat16_8.xy * _MainTex_TexelSize.zw + vec2(-0.5, -0.5);
					            u_xlat9.xy = floor(u_xlat9.xy);
					            u_xlat9.xy = u_xlat9.xy + vec2(1.0, 1.0);
					            u_xlati31.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_17.xyxy).xy) * 0xFFFFFFFFu);
					            u_xlati10.xy = ivec2(uvec2(lessThan(u_xlat16_17.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					            u_xlati31.xy = (-u_xlati31.xy) + u_xlati10.xy;
					            u_xlat31.xy = vec2(u_xlati31.xy);
					            u_xlat9.xy = u_xlat31.xy * vec2(0.5, 0.5) + u_xlat9.xy;
					            u_xlat16_17.xy = u_xlat9.xy * _MainTex_TexelSize.xy;
					            u_xlat16_36 = textureLod(_MainTex, u_xlat16_17.xy, 0.0).w;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_17.x = (-u_xlat16_0.w) + u_xlat16_36;
					            u_xlat16_17.x = abs(u_xlat16_17.x) * abs(u_xlat16_6.x);
					            u_xlat16_17.x = u_xlat16_17.x * -0.5 + 1.0;
					            u_xlat16_17.x = max(u_xlat16_17.x, 0.0);
					            u_xlat16_17.y = max((-u_xlat16_36), 0.0);
					            u_xlat16_39 = max(u_xlat16_36, 0.0);
					            u_xlat16_17.x = u_xlat16_17.x * u_xlat16_39;
					            u_xlat16_6.xw = abs(u_xlat16_6.xx) * u_xlat16_2.xy + vec2(-1.0, -1.0);
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.xw = min(max(u_xlat16_6.xw, 0.0), 1.0);
					#else
					            u_xlat16_6.xw = clamp(u_xlat16_6.xw, 0.0, 1.0);
					#endif
					            u_xlat16_8.xy = u_xlat16_6.xw * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					            u_xlat16_6.xw = u_xlat16_6.xw * u_xlat16_6.xw;
					            u_xlat16_6.xw = (-u_xlat16_8.xy) * u_xlat16_6.xw + vec2(1.0, 1.0);
					            u_xlat16_8.xy = u_xlat16_6.xw * u_xlat16_17.yx;
					            u_xlat16_37 = u_xlat16_17.y * u_xlat16_6.x + u_xlat16_37;
					            u_xlat16_4.xyz = u_xlat16_7.xyz * u_xlat16_8.xxx + u_xlat16_4.xyz;
					            u_xlat16_38 = u_xlat16_17.x * u_xlat16_6.w + u_xlat16_38;
					            u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_8.yyy + u_xlat16_5.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_37 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_4.xyz / u_xlat16_2.xxx;
					        u_xlat16_35 = u_xlat16_38 + 9.99999975e-05;
					        u_xlat16_4.xyz = u_xlat16_5.xyz / vec3(u_xlat16_35);
					        u_xlat16_35 = u_xlat16_38 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					        u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					        u_xlat16_37 = u_xlat16_37 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					        u_xlat16_4.xyz = (-u_xlat16_0.xyz) + u_xlat16_4.xyz;
					        u_xlat16_4.xyz = vec3(u_xlat16_35) * u_xlat16_4.xyz + u_xlat16_0.xyz;
					        u_xlat16_5.x = max((-u_xlat16_0.w), 0.0);
					        u_xlat16_5.x = max(u_xlat16_37, u_xlat16_5.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					        u_xlat16_2.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz + u_xlat16_4.xyz;
					        u_xlat16_3.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_3.xyz = min(u_xlat16_2.xyz, u_xlat16_3.xyz);
					        u_xlat16_2.x = u_xlat16_35 + u_xlat16_37;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_13.xyz = (-u_xlat16_0.xyz) + u_xlat16_3.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_13.xyz + u_xlat16_0.xyz;
					        SV_Target0.w = max(u_xlat1.w, u_xlat16_37);
					    } else {
					        u_xlat1.xyz = u_xlat16_0.xyz;
					        SV_Target0 = u_xlat1;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
		Pass {
			Tags { "Name" = "FallbackSubShader_SM3" }
			ZTest Always
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 3114830
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute mediump vec2 in_TEXCOORD0;
					varying mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D _SecondTex;
					uniform lowp sampler2D _ThirdTex;
					varying mediump vec2 vs_TEXCOORD0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					lowp vec3 u_xlat10_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					lowp float u_xlat10_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = texture2DLodEXT(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat10_1.xy = texture2DLodEXT(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat10_1.y, u_xlat10_1.x);
					    u_xlat16_10.x = u_xlat10_1.y * 1.17647052;
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat10_5.xyz = texture2DLodEXT(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat10_29 = texture2DLodEXT(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat10_1.y) + u_xlat10_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat10_29), 0.0);
					            u_xlat16_30 = max(u_xlat10_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat10_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat10_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat10_1.xyz = texture2DLodEXT(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat10_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in mediump vec2 in_TEXCOORD0;
					out mediump vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 _MainTex_TexelSize;
					uniform 	mediump vec4 _BlurCoe;
					uniform 	vec4 _Offsets;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D _SecondTex;
					UNITY_LOCATION(2) uniform mediump sampler2D _ThirdTex;
					in mediump vec2 vs_TEXCOORD0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					bool u_xlatb5;
					mediump vec4 u_xlat16_6;
					mediump vec2 u_xlat16_7;
					mediump vec3 u_xlat16_10;
					mediump vec2 u_xlat16_14;
					mediump float u_xlat16_15;
					mediump vec2 u_xlat16_18;
					int u_xlati25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat0.w * _Offsets.z;
					    u_xlat16_1.xy = textureLod(_SecondTex, vs_TEXCOORD0.xy, 0.0).xy;
					    u_xlat16_2.x = min(u_xlat16_1.y, u_xlat16_1.x);
					    u_xlat16_10.x = u_xlat16_1.y * 1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_18.x = u_xlat16_10.x * -2.0 + 3.0;
					    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;
					    u_xlat16_2.y = u_xlat16_10.x * u_xlat16_18.x;
					    u_xlat16_2.x = u_xlat16_2.x * -1.17647052;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
					#else
					    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
					#endif
					    u_xlat16_26 = u_xlat16_2.x * -2.0 + 3.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26;
					    u_xlat16_18.xy = u_xlat16_2.yx * _BlurCoe.yx;
					    u_xlat16_18.x = max(u_xlat16_18.y, u_xlat16_18.x);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(u_xlat16_18.x>=0.00999999978);
					#else
					    u_xlatb1 = u_xlat16_18.x>=0.00999999978;
					#endif
					    if(u_xlatb1){
					        u_xlat16_2.x = u_xlat16_2.x * _BlurCoe.x + 0.00999999978;
					        u_xlat16_2.y = u_xlat16_2.y * _BlurCoe.y + 0.00999999978;
					        u_xlat16_2.xy = u_xlat16_18.xx / u_xlat16_2.xy;
					        u_xlat16_18.xy = u_xlat16_18.xx * _MainTex_TexelSize.xy;
					        u_xlat1.xz = _Offsets.xy * vec2(-2.0, -2.0);
					        u_xlat16_3.x = float(0.0);
					        u_xlat16_3.y = float(0.0);
					        u_xlat16_3.z = float(0.0);
					        u_xlat16_27 = float(0.00100000005);
					        u_xlat16_4.x = float(0.0);
					        u_xlat16_4.y = float(0.0);
					        u_xlat16_4.z = float(0.0);
					        u_xlat16_28 = float(0.00100000005);
					        for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<16 ; u_xlati_loop_1++)
					        {
					            u_xlat16_6.x = float(u_xlati_loop_1);
					            u_xlat16_14.x = u_xlat16_6.x * 0.0666666701;
					            u_xlat5.xy = u_xlat16_14.xx * u_xlat1.xz + _Offsets.xy;
					            u_xlat16_14.xy = u_xlat5.xy * u_xlat16_18.xy + vs_TEXCOORD0.xy;
					            u_xlat16_5.xyz = textureLod(_MainTex, u_xlat16_14.xy, 0.0).xyz;
					            u_xlat16_29 = textureLod(_SecondTex, u_xlat16_14.xy, 0.0).y;
					            u_xlat16_6.x = u_xlat16_6.x * 0.13333334 + -1.0;
					            u_xlat16_14.x = (-u_xlat16_1.y) + u_xlat16_29;
					            u_xlat16_14.x = abs(u_xlat16_14.x) * abs(u_xlat16_6.x);
					            u_xlat16_14.x = u_xlat16_14.x * -0.5 + 1.0;
					            u_xlat16_14.x = max(u_xlat16_14.x, 0.0);
					            u_xlat16_14.y = max((-u_xlat16_29), 0.0);
					            u_xlat16_30 = max(u_xlat16_29, 0.0);
					            u_xlat16_14.x = u_xlat16_14.x * u_xlat16_30;
					            u_xlat16_30 = abs(u_xlat16_6.x) * u_xlat16_2.x + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					            u_xlat16_7.x = u_xlat16_30 * -2.0 + 3.0;
					            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;
					            u_xlat16_6.w = (-u_xlat16_7.x) * u_xlat16_30 + 1.0;
					            u_xlat16_6.x = abs(u_xlat16_6.x) * u_xlat16_2.y + -1.0;
					#ifdef UNITY_ADRENO_ES3
					            u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					            u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					            u_xlat16_15 = u_xlat16_6.x * -2.0 + 3.0;
					            u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					            u_xlat16_6.x = (-u_xlat16_15) * u_xlat16_6.x + 1.0;
					            u_xlat16_7.xy = u_xlat16_6.wx * u_xlat16_14.yx;
					            u_xlat16_27 = u_xlat16_14.y * u_xlat16_6.w + u_xlat16_27;
					            u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx + u_xlat16_3.xyz;
					            u_xlat16_28 = u_xlat16_14.x * u_xlat16_6.x + u_xlat16_28;
					            u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.yyy + u_xlat16_4.xyz;
					        }
					        u_xlat16_2.x = u_xlat16_27 + 9.99999975e-05;
					        u_xlat16_2.xyz = u_xlat16_3.xyz / u_xlat16_2.xxx;
					        u_xlat16_26 = u_xlat16_28 + 9.99999975e-05;
					        u_xlat16_3.xyz = u_xlat16_4.xyz / vec3(u_xlat16_26);
					        u_xlat16_26 = u_xlat16_28 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
					#else
					        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
					#endif
					        u_xlat16_27 = u_xlat16_27 * 0.125;
					#ifdef UNITY_ADRENO_ES3
					        u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
					#else
					        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
					#endif
					        u_xlat16_3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					        u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz + u_xlat0.xyz;
					        u_xlat16_4.x = max((-u_xlat16_1.y), 0.0);
					        u_xlat16_4.x = max(u_xlat16_27, u_xlat16_4.x);
					        u_xlat16_2.xyz = u_xlat16_2.xyz + (-u_xlat16_3.xyz);
					        u_xlat16_2.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz + u_xlat16_3.xyz;
					        u_xlat16_1.xyz = textureLod(_ThirdTex, vs_TEXCOORD0.xy, 0.0).xyz;
					        u_xlat16_1.xyz = min(u_xlat16_1.xyz, u_xlat16_2.xyz);
					        u_xlat16_2.x = u_xlat16_26 + u_xlat16_27;
					        u_xlat16_2.x = min(u_xlat16_2.x, 1.0);
					        u_xlat16_10.xyz = (-u_xlat0.xyz) + u_xlat16_1.xyz;
					        SV_Target0.xyz = u_xlat16_2.xxx * u_xlat16_10.xyz + u_xlat0.xyz;
					        SV_Target0.w = max(u_xlat0.w, u_xlat16_27);
					    } else {
					        SV_Target0 = u_xlat0;
					    }
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
			}
		}
	}
}