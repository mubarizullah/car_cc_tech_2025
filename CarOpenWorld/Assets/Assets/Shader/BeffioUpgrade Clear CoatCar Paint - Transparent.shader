Shader "Beffio/Upgrade Clear Coat/Car Paint - Transparent" {
	Properties {
		_Color ("Base Albedo", Vector) = (1,1,1,1)
		_MainTex ("Base Albedo Texture", 2D) = "white" {}
		_Glossiness ("Base Smoothness", Range(0, 1)) = 0.5
		[Gamma] _Metallic ("Base Metallic", Range(0, 1)) = 0
		_MetallicGlossMap ("Base Metallic Texture", 2D) = "white" {}
		_BumpScale ("Scale", Float) = 1
		[Normal] _BumpMap ("Normal Map", 2D) = "bump" {}
		_OcclusionStrength ("Strength", Range(0, 1)) = 1
		_OcclusionMap ("Occlusion", 2D) = "white" {}
		_EmissionColor ("Color", Vector) = (0,0,0,1)
		_EmissionMap ("Emission", 2D) = "white" {}
		[NoScaleOffset] [Normal] _FlakesBumpMap ("Base Bump Flakes (normal)", 2D) = "bump" {}
		_FlakesBumpMapScale ("Base Bump Flakes Scale", Float) = 1
		_FlakesBumpStrength ("Base Bump Flakes Strength", Range(0.001, 8)) = 1
		_FlakeColor ("Base Flakes Albedo", Vector) = (1,1,1,1)
		_FlakesColorMap ("Base Flakes Albedo Texture", 2D) = "black" {}
		_FlakesColorMapScale ("Base Flakes Color Scale", Float) = 1
		_FlakesColorStrength ("Base Flakes Color Strength", Range(0, 10)) = 1
		_FlakesColorCutoff ("Base Flakes Color Cutoff", Range(0, 0.95)) = 0.5
		_FresnelColor ("Fresnel Color", Vector) = (1,1,1,1)
		_FresnelPower ("Fresnel Power", Range(0, 10)) = 1
		_ReflectionSpecularMap ("Reflection Specular Map", 2D) = "black" {}
		_ReflectionSpecular ("Reflection Specular", Vector) = (0.3,0.3,0.3,1)
		_ReflectionGlossiness ("Reflection Smoothness", Range(0, 1)) = 1
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "False" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 56545
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_29 * u_xlat3.z;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_33 = u_xlat16_32 + _Glossiness;
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat9;
					mediump float u_xlat16_14;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_27 = (-u_xlat24) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_1 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_1;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.x = (-u_xlat16_29) + 1.0;
					    u_xlat16_14 = u_xlat16_6.x + _Glossiness;
					    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_29 + u_xlat16_6.x;
					    u_xlat16_6.xzw = u_xlat16_4.xyz * vec3(u_xlat16_29);
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_14);
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1 * u_xlat16_1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_5.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat16_6.xzw * u_xlat16_4.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat9;
					mediump float u_xlat16_14;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_27 = (-u_xlat24) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_1 = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_1;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.x = (-u_xlat16_29) + 1.0;
					    u_xlat16_14 = u_xlat16_6.x + _Glossiness;
					    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_29 + u_xlat16_6.x;
					    u_xlat16_6.xzw = u_xlat16_4.xyz * vec3(u_xlat16_29);
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_14);
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1 * u_xlat16_1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_5.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat16_6.xzw * u_xlat16_4.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_29 * u_xlat3.z;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_33 = u_xlat16_32 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat9;
					mediump float u_xlat16_14;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat24) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.x = (-u_xlat16_29) + 1.0;
					    u_xlat16_14 = u_xlat16_6.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
					#else
					    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_29 + u_xlat16_6.x;
					    u_xlat16_6.xzw = u_xlat16_4.xyz * vec3(u_xlat16_29);
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_14);
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_5.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat16_6.xzw * u_xlat16_4.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat9;
					mediump float u_xlat16_14;
					float u_xlat16;
					float u_xlat24;
					mediump float u_xlat16_24;
					mediump float u_xlat16_27;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat24 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_27 = (-u_xlat24) + 1.0;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;
					    u_xlat16_24 = (-_Glossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_24) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_1.x = u_xlat16_24 * u_xlat16_24;
					    u_xlat16_4.x = u_xlat16_24 * u_xlat16_1.x;
					    u_xlat16_24 = u_xlat16_24 * u_xlat16_24 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_6.x = (-u_xlat16_29) + 1.0;
					    u_xlat16_14 = u_xlat16_6.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
					#else
					    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_29 + u_xlat16_6.x;
					    u_xlat16_6.xzw = u_xlat16_4.xyz * vec3(u_xlat16_29);
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_14);
					    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat9 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
					#else
					    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16 = max(u_xlat9, 0.319999993);
					    u_xlat16 = u_xlat16_24 * u_xlat16;
					    u_xlat16_24 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_24 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat16;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_5.xyz * u_xlat0.xxx;
					    u_xlat0.xzw = u_xlat16_6.xzw * u_xlat16_4.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat8) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_15;
					float u_xlat27;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat0.z * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat9 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat3.xyz = vec3(u_xlat9) * u_xlat3.xyz;
					    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = u_xlat3.xyz * (-u_xlat16_10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_1.x);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat9;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat2.xyz = u_xlat3.xyz * (-vec3(u_xlat9)) + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat0.x = u_xlat9 * u_xlat9;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat27) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_6 = u_xlat16_32 + _Glossiness;
					    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_15.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_15.xyz = u_xlat16_1.www * u_xlat16_15.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_6);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_15.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat3);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat3);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat3);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_15.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_15;
					float u_xlat27;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat0.z * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat9 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat3.xyz = vec3(u_xlat9) * u_xlat3.xyz;
					    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = u_xlat3.xyz * (-u_xlat16_10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_1.x);
					    u_xlat16_4.x = u_xlat16_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat2.xyz = u_xlat3.xyz * (-vec3(u_xlat9)) + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat0.x = u_xlat9 * u_xlat9;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat27) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_6 = u_xlat16_32 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
					#else
					    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_15.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_15.xyz = u_xlat16_1.www * u_xlat16_15.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_6);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_15.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat3);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat3);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat3);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_15.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_29 * u_xlat3.z;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_33 = u_xlat16_32 + _Glossiness;
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = u_xlat16_1.www * u_xlat16_7.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_6.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_7.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_6.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_7.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.z = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat3.z) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_29 * u_xlat3.z;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat28 = u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat28) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_33 = u_xlat16_32 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = u_xlat16_1.www * u_xlat16_7.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_8.xyz = vec3(u_xlat16_9) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_4.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_7.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_7.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_7.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_33;
					float u_xlat34;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_31 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_31)) + (-u_xlat4.xyz);
					    u_xlat5.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat5.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat5.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat10_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat34 = u_xlat30;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat5.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat34) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_7.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_31) + 1.0;
					    u_xlat16_36 = u_xlat16_33 + _Glossiness;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_31 + u_xlat16_33;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
					    u_xlat16_8.xyz = u_xlat16_2.www * u_xlat16_8.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_19;
					float u_xlat21;
					mediump float u_xlat16_22;
					float u_xlat25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_2 * _Color;
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat25 = u_xlat25 * u_xlat16_19 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat25;
					    u_xlat21 = u_xlat16_12 / u_xlat21;
					    u_xlat16_27 = u_xlat16_5.x * u_xlat16_12;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat12.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_8)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_8 = (-u_xlat0.x) + 1.0;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat16_1.x = (-u_xlat16_22) + 1.0;
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_22 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + _Glossiness;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.xzw = (-u_xlat16_6.xyz) + u_xlat16_1.xxx;
					    u_xlat16_1.xyz = vec3(u_xlat16_8) * u_xlat16_1.xzw + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_19;
					float u_xlat21;
					mediump float u_xlat16_22;
					float u_xlat25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat10_2 * _Color;
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat25 = dot(u_xlat0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat25 = u_xlat25 * u_xlat16_19 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat25;
					    u_xlat21 = u_xlat16_12 / u_xlat21;
					    u_xlat16_27 = u_xlat16_5.x * u_xlat16_12;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat12.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_8)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_8 = (-u_xlat0.x) + 1.0;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat10_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat16_1.x = (-u_xlat16_22) + 1.0;
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_22 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + _Glossiness;
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_1.xzw = (-u_xlat16_6.xyz) + u_xlat16_1.xxx;
					    u_xlat16_1.xyz = vec3(u_xlat16_8) * u_xlat16_1.xzw + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					float u_xlat30;
					mediump float u_xlat16_31;
					mediump float u_xlat16_33;
					float u_xlat34;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat4.xyz;
					    u_xlat16_31 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_31)) + (-u_xlat4.xyz);
					    u_xlat5.z = (-_Glossiness) + 1.0;
					    u_xlat16_31 = (-u_xlat5.z) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat5.z;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_2.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat34 = u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat5.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat34) + 1.0;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_31 * u_xlat16_10;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_7.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_31) + 1.0;
					    u_xlat16_36 = u_xlat16_33 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_31 + u_xlat16_33;
					    u_xlat16_8.xyz = vec3(u_xlat16_31) * u_xlat16_2.xyz;
					    u_xlat16_8.xyz = u_xlat16_2.www * u_xlat16_8.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_9.xyz = vec3(u_xlat16_10) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_9.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz + u_xlat16_1.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_19;
					float u_xlat21;
					mediump float u_xlat16_22;
					float u_xlat25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_2 * _Color;
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat25 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat25 = u_xlat25 * u_xlat16_19 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat25;
					    u_xlat21 = u_xlat16_12 / u_xlat21;
					    u_xlat16_27 = u_xlat16_5.x * u_xlat16_12;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat12.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_8)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = (-u_xlat0.x) + 1.0;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat16_1.x = (-u_xlat16_22) + 1.0;
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_22 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xzw = (-u_xlat16_6.xyz) + u_xlat16_1.xxx;
					    u_xlat16_1.xyz = vec3(u_xlat16_8) * u_xlat16_1.xzw + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_8;
					vec3 u_xlat12;
					mediump float u_xlat16_12;
					mediump float u_xlat16_19;
					float u_xlat21;
					mediump float u_xlat16_22;
					float u_xlat25;
					mediump float u_xlat16_27;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3 = u_xlat16_2 * _Color;
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = vec3(u_xlat16_22) * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat21 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat21 = max(u_xlat21, 0.00100000005);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat5.xyz = vec3(u_xlat21) * u_xlat5.xyz;
					    u_xlat21 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat25 = dot(u_xlat0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat25;
					    u_xlat21 = max(u_xlat21, 0.319999993);
					    u_xlat16_5.x = (-_Glossiness) + 1.0;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x + 1.5;
					    u_xlat21 = u_xlat21 * u_xlat16_12;
					    u_xlat16_12 = u_xlat16_5.x * u_xlat16_5.x;
					    u_xlat16_19 = u_xlat16_12 * u_xlat16_12 + -1.0;
					    u_xlat25 = u_xlat25 * u_xlat16_19 + 1.00001001;
					    u_xlat21 = u_xlat21 * u_xlat25;
					    u_xlat21 = u_xlat16_12 / u_xlat21;
					    u_xlat16_27 = u_xlat16_5.x * u_xlat16_12;
					    u_xlat16_27 = (-u_xlat16_27) * 0.280000001 + 1.0;
					    u_xlat21 = u_xlat21 + -9.99999975e-05;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = min(u_xlat21, 100.0);
					    u_xlat12.xyz = vec3(u_xlat21) * u_xlat16_6.xyz + u_xlat16_3.xyz;
					    u_xlat12.xyz = u_xlat12.xyz * _LightColor0.xyz;
					    u_xlat21 = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = u_xlat12.xyz * vec3(u_xlat21) + u_xlat16_1.xyz;
					    u_xlat16_1.x = (-u_xlat16_5.x) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_5.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat16_8 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_8 = u_xlat16_8 + u_xlat16_8;
					    u_xlat16_3.xyz = u_xlat0.xyz * (-vec3(u_xlat16_8)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_8 = (-u_xlat0.x) + 1.0;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_1.x);
					    u_xlat16_1.x = u_xlat16_0.w + -1.0;
					    u_xlat16_1.x = unity_SpecCube0_HDR.w * u_xlat16_1.x + 1.0;
					    u_xlat16_1.x = u_xlat16_1.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_27);
					    u_xlat16_1.x = (-u_xlat16_22) + 1.0;
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_22 + u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.xzw = (-u_xlat16_6.xyz) + u_xlat16_1.xxx;
					    u_xlat16_1.xyz = vec3(u_xlat16_8) * u_xlat16_1.xzw + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat12.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_20 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_21 = (-u_xlat16_20) + 1.0;
					    u_xlat16_4 = u_xlat16_21 + _Glossiness;
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_20 + u_xlat16_21;
					    u_xlat16_10.xyz = u_xlat16_1.xyz * vec3(u_xlat16_20);
					    u_xlat16_10.xyz = u_xlat16_1.www * u_xlat16_10.xyz;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_4);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat10_0 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.x = (-u_xlat16_21) + 1.0;
					    u_xlat16_10 = u_xlat16_4.x + _Glossiness;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_21 + u_xlat16_4.x;
					    u_xlat16_4.xzw = u_xlat16_0.xyz * vec3(u_xlat16_21);
					    u_xlat16_4.xzw = u_xlat16_0.www * u_xlat16_4.xzw;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_10);
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_4.xzw + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat10_0 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.x = (-u_xlat16_21) + 1.0;
					    u_xlat16_10 = u_xlat16_4.x + _Glossiness;
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_21 + u_xlat16_4.x;
					    u_xlat16_4.xzw = u_xlat16_0.xyz * vec3(u_xlat16_21);
					    u_xlat16_4.xzw = u_xlat16_0.www * u_xlat16_4.xzw;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_10);
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_4.xzw + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_20 * u_xlat16_0.x;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_20 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_21 = (-u_xlat16_20) + 1.0;
					    u_xlat16_4 = u_xlat16_21 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4 = min(max(u_xlat16_4, 0.0), 1.0);
					#else
					    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_20 + u_xlat16_21;
					    u_xlat16_10.xyz = u_xlat16_1.xyz * vec3(u_xlat16_20);
					    u_xlat16_10.xyz = u_xlat16_1.www * u_xlat16_10.xyz;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_4);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_0.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_10.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat16_0 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.x = (-u_xlat16_21) + 1.0;
					    u_xlat16_10 = u_xlat16_4.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_21 + u_xlat16_4.x;
					    u_xlat16_4.xzw = u_xlat16_0.xyz * vec3(u_xlat16_21);
					    u_xlat16_4.xzw = u_xlat16_0.www * u_xlat16_4.xzw;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_10);
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_4.xzw + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump float u_xlat16_10;
					float u_xlat18;
					mediump float u_xlat16_20;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_20 = (-u_xlat0.x) + 1.0;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat16_6 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_3.x = u_xlat16_0.x * u_xlat16_6;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat16_0 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_21 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.x = (-u_xlat16_21) + 1.0;
					    u_xlat16_10 = u_xlat16_4.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_21 + u_xlat16_4.x;
					    u_xlat16_4.xzw = u_xlat16_0.xyz * vec3(u_xlat16_21);
					    u_xlat16_4.xzw = u_xlat16_0.www * u_xlat16_4.xzw;
					    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + vec3(u_xlat16_10);
					    u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_1.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * unity_Lightmap_HDR.xxx;
					    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_4.xzw + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0 * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat10_3 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3 = u_xlat10_3 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_28) + 1.0;
					    u_xlat16_33 = u_xlat16_29 + _Glossiness;
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_28 + u_xlat16_29;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_3.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.www * u_xlat16_7.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_6.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_16;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_9 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_30 = u_xlat16_0.x * u_xlat16_9;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_30);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat10_0 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_30) + 1.0;
					    u_xlat16_7 = u_xlat16_33 + _Glossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_30 + u_xlat16_33;
					    u_xlat16_16.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);
					    u_xlat16_16.xyz = u_xlat16_0.www * u_xlat16_16.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_7);
					    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_16.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform mediump sampler2D unity_Lightmap;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_16;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture2D(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_9 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_30 = u_xlat16_0.x * u_xlat16_9;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_30);
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat10_0 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_30) + 1.0;
					    u_xlat16_7 = u_xlat16_33 + _Glossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_30 + u_xlat16_33;
					    u_xlat16_16.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);
					    u_xlat16_16.xyz = u_xlat16_0.www * u_xlat16_16.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_7);
					    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_16.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_2.x = u_xlat16_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0.x = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0.x = u_xlat16_28 * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_28 * u_xlat16_0.x;
					    u_xlat16_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_3.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_3 = u_xlat16_3 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_29 = (-u_xlat16_28) + 1.0;
					    u_xlat16_33 = u_xlat16_29 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_3.w * u_xlat16_28 + u_xlat16_29;
					    u_xlat16_7.xyz = vec3(u_xlat16_28) * u_xlat16_3.xyz;
					    u_xlat16_7.xyz = u_xlat16_3.www * u_xlat16_7.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_6.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_7.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_16;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_9 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_30 = u_xlat16_0.x * u_xlat16_9;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_30);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat16_0 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_30) + 1.0;
					    u_xlat16_7 = u_xlat16_33 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_30 + u_xlat16_33;
					    u_xlat16_16.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);
					    u_xlat16_16.xyz = u_xlat16_0.www * u_xlat16_16.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_7);
					    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_16.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD4.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 unity_Lightmap_HDR;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in highp vec4 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump float u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_16;
					float u_xlat27;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					mediump float u_xlat16_30;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.z;
					    u_xlat0.y = vs_TEXCOORD2.z;
					    u_xlat0.z = vs_TEXCOORD3.z;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
					    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;
					    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);
					    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;
					    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;
					    u_xlat0.w = 1.0;
					    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
					    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
					    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
					    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_1.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_5.xyz = texture(unity_Lightmap, vs_TEXCOORD4.xy).xyz;
					    u_xlat16_1.xyz = unity_Lightmap_HDR.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    u_xlat4.x = vs_TEXCOORD1.w;
					    u_xlat4.y = vs_TEXCOORD2.w;
					    u_xlat4.z = vs_TEXCOORD3.w;
					    u_xlat4.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;
					    u_xlat16_28 = dot((-u_xlat4.xyz), u_xlat0.xyz);
					    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;
					    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat4.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_28 = (-u_xlat0.x) + 1.0;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0.x = (-_Glossiness) + 1.0;
					    u_xlat16_29 = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_29 = u_xlat16_0.x * u_xlat16_29;
					    u_xlat16_29 = u_xlat16_29 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_9 = u_xlat16_0.x * u_xlat16_0.x;
					    u_xlat16_30 = u_xlat16_0.x * u_xlat16_9;
					    u_xlat16_30 = (-u_xlat16_30) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(u_xlat16_30);
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_6.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_0 = u_xlat16_0 * _Color;
					    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_30) + 1.0;
					    u_xlat16_7 = u_xlat16_33 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_0.w * u_xlat16_30 + u_xlat16_33;
					    u_xlat16_16.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);
					    u_xlat16_16.xyz = u_xlat16_0.www * u_xlat16_16.xyz;
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_7);
					    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_16.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_15;
					float u_xlat27;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat0.z * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat9 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat3.xyz = vec3(u_xlat9) * u_xlat3.xyz;
					    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = u_xlat3.xyz * (-u_xlat16_10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_1.x);
					    u_xlat16_4.x = u_xlat10_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat9;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat2.xyz = u_xlat3.xyz * (-vec3(u_xlat9)) + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat0.x = u_xlat9 * u_xlat9;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat27) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_6 = u_xlat16_32 + _Glossiness;
					    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_15.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_15.xyz = u_xlat16_1.www * u_xlat16_15.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_6);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_15.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat3);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat3);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat3);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_15.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					uniform lowp sampler2D _MainTex;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat10_4 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat10_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat10_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat10_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump float u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					float u_xlat9;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_15;
					float u_xlat27;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.z = (-_Glossiness) + 1.0;
					    u_xlat16_1.x = (-u_xlat0.z) * 0.699999988 + 1.70000005;
					    u_xlat16_1.x = u_xlat0.z * u_xlat16_1.x;
					    u_xlat16_1.x = u_xlat16_1.x * 6.0;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat9 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat3.xyz = vec3(u_xlat9) * u_xlat3.xyz;
					    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat3.xyz);
					    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
					    u_xlat16_10.xyz = u_xlat3.xyz * (-u_xlat16_10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_1.x);
					    u_xlat16_4.x = u_xlat16_1.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat9 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat2.xyz = u_xlat3.xyz * (-vec3(u_xlat9)) + u_xlat2.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat0.x = u_xlat9 * u_xlat9;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_31 = (-u_xlat27) + 1.0;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_9 = u_xlat16_31 * u_xlat16_9;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_5.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_32 = (-u_xlat16_31) + 1.0;
					    u_xlat16_6 = u_xlat16_32 + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
					#else
					    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_31 + u_xlat16_32;
					    u_xlat16_15.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);
					    u_xlat16_15.xyz = u_xlat16_1.www * u_xlat16_15.xyz;
					    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_6);
					    u_xlat16_7.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_15.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat16_8.x = dot(unity_SHAr, u_xlat3);
					    u_xlat16_8.y = dot(unity_SHAg, u_xlat3);
					    u_xlat16_8.z = dot(unity_SHAb, u_xlat3);
					    u_xlat16_8.xyz = u_xlat16_8.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_0.xyz = log2(u_xlat16_8.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
					    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_15.xyz + u_xlat16_4.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_4.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform 	mediump vec3 _EmissionColor;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec4 u_xlat16_4;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_9;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_17;
					mediump float u_xlat16_21;
					float u_xlat24;
					mediump float u_xlat16_25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = max(u_xlat24, 0.00100000005);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat24 = max(u_xlat24, 0.319999993);
					    u_xlat16_25 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_25 * u_xlat16_25 + 1.5;
					    u_xlat24 = u_xlat24 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2.xyz = vec3(u_xlat26) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat16_9 = u_xlat16_25 * u_xlat16_25;
					    u_xlat16_17 = u_xlat16_9 * u_xlat16_9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_17 + 1.00001001;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat24 = u_xlat16_9 / u_xlat24;
					    u_xlat16_3.x = u_xlat16_25 * u_xlat16_9;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat24 = u_xlat24 + -9.99999975e-05;
					    u_xlat24 = max(u_xlat24, 0.0);
					    u_xlat24 = min(u_xlat24, 100.0);
					    u_xlat16_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_11.xyz = _Color.xyz * u_xlat16_4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_4 = u_xlat16_4 * _Color;
					    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_5.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_13.xyz = u_xlat16_4.xyz * u_xlat16_5.xxx;
					    u_xlat16_13.xyz = u_xlat16_4.www * u_xlat16_13.xyz;
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat16_11.xyz + u_xlat16_13.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat2.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_13.xyz;
					    u_xlat16_13.x = (-u_xlat16_25) * 0.699999988 + 1.70000005;
					    u_xlat16_13.x = u_xlat16_25 * u_xlat16_13.x;
					    u_xlat16_13.x = u_xlat16_13.x * 6.0;
					    u_xlat16_21 = dot((-u_xlat0.xyz), u_xlat2.xyz);
					    u_xlat16_21 = u_xlat16_21 + u_xlat16_21;
					    u_xlat16_6.xyz = u_xlat2.xyz * (-vec3(u_xlat16_21)) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_21 = (-u_xlat0.x) + 1.0;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_13.x);
					    u_xlat16_13.x = u_xlat16_0.w + -1.0;
					    u_xlat16_13.x = unity_SpecCube0_HDR.w * u_xlat16_13.x + 1.0;
					    u_xlat16_13.x = u_xlat16_13.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * u_xlat16_13.xxx;
					    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz;
					    u_xlat16_3.x = (-u_xlat16_5.x) + 1.0;
					    SV_Target0.w = u_xlat16_4.w * u_xlat16_5.x + u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x + _Glossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyw = (-u_xlat16_11.xyz) + u_xlat16_3.xxx;
					    u_xlat16_3.xyz = vec3(u_xlat16_21) * u_xlat16_5.xyw + u_xlat16_11.xyz;
					    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _EmissionColor.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One One, One One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 105464
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat16_3.xyz;
					    u_xlat0.xzw = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = (-u_xlat16_18) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_18 + u_xlat16_3.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat16_3.xyz;
					    u_xlat0.xzw = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = (-u_xlat16_18) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_18 + u_xlat16_3.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = (-u_xlat16_17) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_17 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat15;
					mediump float u_xlat16_17;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_17);
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = (-u_xlat16_17) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_17 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					bool u_xlatb6;
					float u_xlat18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb6 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb6) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_1.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat18)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_19 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_2.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_2.www + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-u_xlat16_19) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_19 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb5) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb5) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat10_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat18;
					mediump float u_xlat16_20;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat18 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat18) * u_xlat16_2.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(u_xlat18)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_20 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_20);
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_1.www + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;
					    u_xlat16_2.x = (-u_xlat16_20) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_20 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_17);
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_2.x = (-u_xlat16_17) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_17 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					float u_xlat16;
					mediump float u_xlat16_16;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat15 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_16 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_16 * u_xlat16_16 + 1.5;
					    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_16 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_17 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_17);
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_2.x = (-u_xlat16_17) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_17 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(u_xlat16_18);
					    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_1.www + u_xlat16_3.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = (-u_xlat16_18) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_18 + u_xlat16_3.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2.x = texture2D(_LightTextureB0, u_xlat2.xx).x;
					    u_xlat6 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat2.x = u_xlat6 * u_xlat2.x;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat6;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					float u_xlat13;
					mediump float u_xlat16_13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_13 = (-_Glossiness) + 1.0;
					    u_xlat16_2 = u_xlat16_13 * u_xlat16_13 + 1.5;
					    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;
					    u_xlat12 = u_xlat12 * u_xlat16_2;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_13 * u_xlat16_13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat2.x = texture2D(_LightTextureB0, u_xlat2.xx).x;
					    u_xlat6 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat2.x = u_xlat6 * u_xlat2.x;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					float u_xlat18;
					mediump float u_xlat16_19;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat6 = texture(_LightTextureB0, vec2(u_xlat18)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat18) * u_xlat16_1.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat18 = u_xlat18 + u_xlat18;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(u_xlat18)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_19 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_2.xyz;
					    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat16_2.www + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;
					    u_xlat16_1.x = (-u_xlat16_19) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_19 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec3 u_xlat3;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_16;
					float u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat5;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat16_17 = (-_Glossiness) + 1.0;
					    u_xlat16_3 = u_xlat16_17 * u_xlat16_17 + 1.5;
					    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;
					    u_xlat15 = u_xlat15 * u_xlat16_3;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_10 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat15;
					    u_xlat0.x = u_xlat16_17 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_2 = u_xlat16_2 * _Color;
					    u_xlat16_4.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat16_16 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_4.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;
					    u_xlat0.xzw = u_xlat16_4.xyz * u_xlat16_2.www + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat5) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_1.x = (-u_xlat16_16) + 1.0;
					    SV_Target0.w = u_xlat16_2.w * u_xlat16_16 + u_xlat16_1.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14);
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_1.www + u_xlat16_2.xyz;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = (-u_xlat16_14) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_14 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					uniform lowp sampler2D _MainTex;
					uniform highp sampler2D _LightTexture0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat10_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_Glossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_2.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat16_14 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_14);
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_1.www + u_xlat16_2.xyz;
					    u_xlat0.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = (-u_xlat16_14) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_14 + u_xlat16_2.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _MainTex_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _Color;
					uniform 	mediump float _Glossiness;
					uniform 	mediump float _Metallic;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_7;
					mediump float u_xlat16_8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat16_1.x = (-_Glossiness) + 1.0;
					    u_xlat16_5 = u_xlat16_1.x * u_xlat16_1.x + 1.5;
					    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;
					    u_xlat12 = u_xlat12 * u_xlat16_5;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_8 = u_xlat16_1.x * u_xlat16_1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat16_1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_3.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_1 = u_xlat16_1 * _Color;
					    u_xlat16_3.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat0.xzw = u_xlat16_7.xyz * u_xlat16_1.www + u_xlat0.xzw;
					    u_xlat2.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat2.xy;
					    u_xlat2.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat2.xy;
					    u_xlat2.xy = u_xlat2.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat2.x = texture(_LightTexture0, u_xlat2.xy).w;
					    u_xlat16_7.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_7.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = u_xlat16_1.w * u_xlat16_3.x + u_xlat16_7.x;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 239800
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_0;
					    u_xlat16_14 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_14 = max(u_xlat16_14, _ReflectionSpecular.z);
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_3.x = u_xlat16_14 + _ReflectionGlossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_14;
					    u_xlat16_3.xyz = u_xlat16_3.xxx + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x;
					    u_xlat16_14 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_14 = max(u_xlat16_14, _ReflectionSpecular.z);
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_3.x = u_xlat16_14 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_14;
					    u_xlat16_3.xyz = u_xlat16_3.xxx + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_14 * u_xlat16_0;
					    u_xlat16_14 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_14 = max(u_xlat16_14, _ReflectionSpecular.z);
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_3.x = u_xlat16_14 + _ReflectionGlossiness;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_14;
					    u_xlat16_3.xyz = u_xlat16_3.xxx + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_0.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_14 * u_xlat16_0.x;
					    u_xlat16_14 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_14 = max(u_xlat16_14, _ReflectionSpecular.z);
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_14 = (-u_xlat16_14) + 1.0;
					    u_xlat16_3.x = u_xlat16_14 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
					#else
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_14;
					    u_xlat16_3.xyz = u_xlat16_3.xxx + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_LightmapST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD3.zw = vec2(0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					mediump float u_xlat16_7;
					float u_xlat12;
					mediump float u_xlat16_14;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_14 = (-u_xlat0.x) + 1.0;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;
					    u_xlat0.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_3.x = (-u_xlat0.x) * 0.699999988 + 1.70000005;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat16_3.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_3.x);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat4 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat4;
					    u_xlat16_3.x = (-u_xlat16_3.x) * 0.280000001 + 1.0;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    u_xlat16_7 = u_xlat16_3.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
					#else
					    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_7) + (-_ReflectionSpecular.xyz);
					    u_xlat16_3.xyz = vec3(u_xlat16_14) * u_xlat16_3.xyz + _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat10_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat10_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat24 = inversesqrt(u_xlat24);
					    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), u_xlat1.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat1.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat3.xw = (-vec2(_ReflectionGlossiness)) + vec2(1.0, 1.0);
					    u_xlat16_26 = (-u_xlat3.x) * 0.699999988 + 1.70000005;
					    u_xlat16_26 = u_xlat16_26 * u_xlat3.x;
					    u_xlat16_26 = u_xlat16_26 * 6.0;
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_26);
					    u_xlat16_4.x = u_xlat16_2.w + -1.0;
					    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;
					    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
					    u_xlat24 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat25 = u_xlat24;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat24)) + u_xlat0.xyz;
					    u_xlat24 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat3.y = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat3.yw).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat16_28 = (-u_xlat25) + 1.0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_28;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_28 * u_xlat16_0;
					    u_xlat16_28 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_28 = max(u_xlat16_28, _ReflectionSpecular.z);
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_28 = (-u_xlat16_28) + 1.0;
					    u_xlat16_29 = u_xlat16_28 + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_28;
					    u_xlat16_7.xyz = vec3(u_xlat16_29) + (-_ReflectionSpecular.xyz);
					    u_xlat16_7.xyz = vec3(u_xlat16_0) * u_xlat16_7.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.w = u_xlat0.x;
					    vs_TEXCOORD0.z = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD1.w = u_xlat0.y;
					    vs_TEXCOORD1.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat6;
					mediump float u_xlat16_9;
					float u_xlat10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD0.w;
					    u_xlat0.y = vs_TEXCOORD1.w;
					    u_xlat0.z = vs_TEXCOORD2.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat16_3.x = dot((-u_xlat1.xyz), u_xlat2.xyz);
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat2.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat15 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat16_4.x = (-u_xlat15) * 0.699999988 + 1.70000005;
					    u_xlat16_4.x = u_xlat15 * u_xlat16_4.x;
					    u_xlat16_4.x = u_xlat16_4.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4.x);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat1.x = u_xlat15 * u_xlat15;
					    u_xlat16_4.x = u_xlat15 * u_xlat1.x;
					    u_xlat15 = u_xlat15 * u_xlat15 + 1.5;
					    u_xlat16_4.x = (-u_xlat16_4.x) * 0.280000001 + 1.0;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xxx;
					    u_xlat16_4.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_4.x = max(u_xlat16_4.x, _ReflectionSpecular.z);
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_9 = u_xlat16_4.x + _ReflectionGlossiness;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
					#else
					    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
					#endif
					    SV_Target0.w = u_xlat16_4.x;
					    u_xlat16_4.xyz = vec3(u_xlat16_9) + (-_ReflectionSpecular.xyz);
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * u_xlat16_4.xyz + _ReflectionSpecular.xyz;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat6 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat10 = max(u_xlat6, 0.319999993);
					    u_xlat10 = u_xlat15 * u_xlat10;
					    u_xlat15 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat15 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat5) + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "LIGHTMAP_SHADOW_MIXING" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "False" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One One, One One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 303613
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xx).x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3 = max(u_xlat16_3, _ReflectionSpecular.z);
					    u_xlat16_3 = (-u_xlat16_3) + 1.0;
					    SV_Target0.w = (-u_xlat16_3) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3 = max(u_xlat16_3, _ReflectionSpecular.z);
					    u_xlat16_3 = (-u_xlat16_3) + 1.0;
					    SV_Target0.w = (-u_xlat16_3) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3 = max(u_xlat16_3, _ReflectionSpecular.z);
					    u_xlat16_3 = (-u_xlat16_3) + 1.0;
					    SV_Target0.w = (-u_xlat16_3) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD0.y = u_xlat2.x;
					    vs_TEXCOORD0.x = u_xlat1.z;
					    vs_TEXCOORD0.z = u_xlat0.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD1.z = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat0.x;
					    vs_TEXCOORD1.y = u_xlat2.y;
					    vs_TEXCOORD2.y = u_xlat2.z;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * _LightColor0.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3 = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3 = max(u_xlat16_3, _ReflectionSpecular.z);
					    u_xlat16_3 = (-u_xlat16_3) + 1.0;
					    SV_Target0.w = (-u_xlat16_3) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xz = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xz).w;
					    u_xlatb10 = 0.0<vs_TEXCOORD4.z;
					    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_18;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_18;
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;
					    u_xlatb5 = 0.0<vs_TEXCOORD4.z;
					    u_xlat16_3.x = (u_xlatb5) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = texture2D(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat1.x = texture2D(_LightTexture0, u_xlat1.xy).w;
					    u_xlatb5 = 0.0<vs_TEXCOORD4.z;
					    u_xlat16_3.x = (u_xlatb5) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = texture2D(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb10 = 0.0<u_xlat1.z;
					#endif
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = texture(_LightTextureB0, vec2(u_xlat15)).x;
					    u_xlat16_18 = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_18 = u_xlat0.x * u_xlat16_18;
					    u_xlat16_18 = u_xlat15 * u_xlat16_18;
					    u_xlat16_4.xyz = vec3(u_xlat16_18) * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat3.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD0.z;
					    u_xlat3.y = vs_TEXCOORD1.z;
					    u_xlat3.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD4 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD3.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD3.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD3.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat3.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat3.x;
					    u_xlat3.x = vs_TEXCOORD0.z;
					    u_xlat3.y = vs_TEXCOORD1.z;
					    u_xlat3.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xzw;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD4.xyz).w;
					    u_xlat0.x = u_xlat10 * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = texture2D(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat5 = textureCube(_LightTexture0, vs_TEXCOORD4.xyz).w;
					    u_xlat1.x = u_xlat5 * u_xlat1.x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat1.x = texture2D(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat5 = textureCube(_LightTexture0, vs_TEXCOORD4.xyz).w;
					    u_xlat1.x = u_xlat5 * u_xlat1.x;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					float u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xzw = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat10 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13)).x;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat13 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat2.x = u_xlat13 * u_xlat13 + 1.5;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat12 = u_xlat12 * u_xlat2.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat2.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xyz = vs_TEXCOORD3.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD3.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD3.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat13)).x;
					    u_xlat1.x = u_xlat1.x * u_xlat5;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_2.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD4.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1 = texture2D(_LightTexture0, vs_TEXCOORD4.xy).w;
					    u_xlat16_3.xyz = vec3(u_xlat1) * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec2 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					float u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1 = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1 * u_xlat1 + 1.5;
					    u_xlat1 = u_xlat1 * u_xlat1;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1 * u_xlat1 + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1 = texture2D(_LightTexture0, vs_TEXCOORD4.xy).w;
					    u_xlat16_3.xyz = vec3(u_xlat1) * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD0.z;
					    u_xlat1.y = vs_TEXCOORD1.z;
					    u_xlat1.z = vs_TEXCOORD2.z;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_ReflectionGlossiness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_2.xyz = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat0.xy = vs_TEXCOORD3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat16_2.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_2.x = max(u_xlat16_2.x, _ReflectionSpecular.z);
					    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_2.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x + 1.5;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xy = vs_TEXCOORD3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xy).w;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD0.y = u_xlat3.x;
					    vs_TEXCOORD0.x = u_xlat2.z;
					    vs_TEXCOORD0.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD1.z = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat1.x;
					    vs_TEXCOORD1.y = u_xlat3.y;
					    vs_TEXCOORD2.y = u_xlat3.z;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD4.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _ReflectionGlossiness;
					uniform 	mediump vec4 _ReflectionSpecular;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat12 = max(u_xlat12, 0.319999993);
					    u_xlat1.x = (-_ReflectionGlossiness) + 1.0;
					    u_xlat5.x = u_xlat1.x * u_xlat1.x + 1.5;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat12 = u_xlat12 * u_xlat5.x;
					    u_xlat2.x = vs_TEXCOORD0.z;
					    u_xlat2.y = vs_TEXCOORD1.z;
					    u_xlat2.z = vs_TEXCOORD2.z;
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat4 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat8 = u_xlat1.x * u_xlat1.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat12;
					    u_xlat0.x = u_xlat1.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat0.xxx * _ReflectionSpecular.xyz;
					    u_xlat1.xy = vs_TEXCOORD3.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD3.xx + u_xlat1.xy;
					    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD3.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xy).w;
					    u_xlat16_3.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(u_xlat4) * u_xlat0.xzw;
					    SV_Target0.xyz = u_xlat0.xyz;
					    u_xlat16_3.x = max(_ReflectionSpecular.y, _ReflectionSpecular.x);
					    u_xlat16_3.x = max(u_xlat16_3.x, _ReflectionSpecular.z);
					    u_xlat16_3.x = (-u_xlat16_3.x) + 1.0;
					    SV_Target0.w = (-u_xlat16_3.x) + 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "CustomCarPaintEditor"
}