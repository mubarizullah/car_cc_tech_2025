Shader "Time of Day/Cloud Layer" {
	Properties {
		_MainTex ("Density Map (RGBA)", 2D) = "white" {}
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Geometry+530" "RenderType" = "Background" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Geometry+530" "RenderType" = "Background" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ZWrite Off
			Fog {
				Mode Off
			}
			GpuProgramID 24377
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-vec3(TOD_Brightness));
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat3.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat0.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    u_xlat3.xyz = u_xlat3.xyz * (-vec3(TOD_Brightness));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    vs_TEXCOORD0.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * (-vec3(TOD_Brightness));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * (-vec3(TOD_Brightness));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat4.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat2.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat1.xyz);
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    SV_Target0.xyz = sqrt(u_xlat0.xyz);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					lowp float u_xlat10_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_2.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_2.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat3.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_GroundColor.xyz;
					    u_xlat3.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(TOD_Brightness);
					    u_xlat3.xyz = log2(u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat3.xyz = exp2(u_xlat3.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat4.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    vs_TEXCOORD0.xyz = sqrt(u_xlat3.xyz);
					    vs_TEXCOORD4.xyz = sqrt(u_xlat2.xyz);
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_4.xyz = sqrt(u_xlat1.xyz);
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat16_4.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec2 u_xlat1;
					mediump vec3 u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat17;
					float u_xlat22;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					float u_xlat27;
					int u_xlati28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat0.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * in_POSITION0.xyz;
					    u_xlat1.x = u_xlat0.y * 0.899999976 + 0.100000001;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.xy = u_xlat0.xz * u_xlat1.xx;
					    u_xlat1.xy = u_xlat1.xy / TOD_CloudSize.xz;
					    u_xlat17.xy = u_xlat1.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat17.xy + TOD_CloudWind.xz;
					    u_xlat17.x = dot(vec2(0.98480773, -0.173648179), u_xlat1.xy);
					    u_xlat17.y = dot(vec2(0.173648179, 0.98480773), u_xlat1.xy);
					    u_xlat1.xy = u_xlat17.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat1.xy + TOD_CloudWind.xz;
					    u_xlat0.w = max(u_xlat0.y, 0.0);
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat0.xwz * u_xlat1.xxx;
					    u_xlat2.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat25 = u_xlat1.y * u_xlat1.y;
					    u_xlat25 = u_xlat25 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat25 = u_xlat25 + (-TOD_kRadius.y);
					    u_xlat25 = sqrt(u_xlat25);
					    u_xlat25 = (-TOD_kRadius.x) * u_xlat1.y + u_xlat25;
					    u_xlat26 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat26 = u_xlat26 * 1.44269502;
					    u_xlat26 = exp2(u_xlat26);
					    u_xlat3.x = u_xlat1.y * u_xlat2.y;
					    u_xlat3.x = u_xlat3.x / u_xlat2.y;
					    u_xlat3.x = (-u_xlat3.x) + 1.0;
					    u_xlat11.x = u_xlat3.x * 5.25 + -6.80000019;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 3.82999992;
					    u_xlat11.x = u_xlat3.x * u_xlat11.x + 0.458999991;
					    u_xlat3.x = u_xlat3.x * u_xlat11.x + -0.00286999997;
					    u_xlat3.x = u_xlat3.x * 1.44269502;
					    u_xlat3.x = exp2(u_xlat3.x);
					    u_xlat26 = u_xlat26 * u_xlat3.x;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat3.x = u_xlat25 * TOD_kScale.x;
					    u_xlat11.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    u_xlat2.x = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.xyz = u_xlat11.xyz * vec3(0.5, 0.5, 0.5) + u_xlat2.xyz;
					    u_xlat11.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat4.xyz = u_xlat2.xyz;
					    u_xlat5.x = float(0.0);
					    u_xlat5.y = float(0.0);
					    u_xlat5.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat29 = dot(u_xlat4.xyz, u_xlat4.xyz);
					        u_xlat29 = sqrt(u_xlat29);
					        u_xlat29 = max(u_xlat29, 1.0);
					        u_xlat6.x = float(1.0) / u_xlat29;
					        u_xlat29 = (-u_xlat29) + TOD_kRadius.x;
					        u_xlat29 = u_xlat29 * TOD_kScale.z;
					        u_xlat29 = u_xlat29 * 1.44269502;
					        u_xlat29 = exp2(u_xlat29);
					        u_xlat14 = u_xlat3.x * u_xlat29;
					        u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
					        u_xlat30 = dot(TOD_LocalSunDirection.xyz, u_xlat4.xyz);
					        u_xlat30 = (-u_xlat30) * u_xlat6.x + 1.0;
					        u_xlat7 = u_xlat30 * 5.25 + -6.80000019;
					        u_xlat7 = u_xlat30 * u_xlat7 + 3.82999992;
					        u_xlat7 = u_xlat30 * u_xlat7 + 0.458999991;
					        u_xlat30 = u_xlat30 * u_xlat7 + -0.00286999997;
					        u_xlat30 = u_xlat30 * 1.44269502;
					        u_xlat30 = exp2(u_xlat30);
					        u_xlat6.x = (-u_xlat22) * u_xlat6.x + 1.0;
					        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;
					        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;
					        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;
					        u_xlat6.x = u_xlat6.x * 1.44269502;
					        u_xlat6.x = exp2(u_xlat6.x);
					        u_xlat6.x = u_xlat6.x * 0.25;
					        u_xlat6.x = u_xlat30 * 0.25 + (-u_xlat6.x);
					        u_xlat29 = u_xlat29 * u_xlat6.x;
					        u_xlat29 = u_xlat26 * 0.25 + u_xlat29;
					        u_xlat6.xzw = u_xlat11.xyz * (-vec3(u_xlat29));
					        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat6.xzw = exp2(u_xlat6.xzw);
					        u_xlat5.xyz = u_xlat6.xzw * vec3(u_xlat14) + u_xlat5.xyz;
					        u_xlat4.xyz = u_xlat1.xyz * vec3(u_xlat25) + u_xlat4.xyz;
					    }
					    u_xlat1.xyz = u_xlat5.xyz * TOD_SunSkyColor.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * TOD_kSun.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * TOD_kSun.www;
					    u_xlat25 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat26 = dot(u_xlat0.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat3.x = u_xlat26 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat25 = u_xlat25 * u_xlat3.x;
					    u_xlat3.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat4.xyz = (-u_xlat3.xyz) + TOD_FogColor.xyz;
					    u_xlat3.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat3.xyz;
					    u_xlat25 = u_xlat26 * u_xlat26;
					    u_xlat24 = (-u_xlat0.w) * 0.75 + 1.0;
					    u_xlat27 = dot(u_xlat0.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = log2(u_xlat27);
					    u_xlat27 = u_xlat27 * TOD_MoonHaloPower;
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat25 = u_xlat25 * 0.75 + 0.75;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat25);
					    u_xlat25 = u_xlat26 * u_xlat26 + 1.0;
					    u_xlat4.x = u_xlat25 * TOD_kBetaMie.x;
					    u_xlat12 = TOD_kBetaMie.z * u_xlat26 + TOD_kBetaMie.y;
					    u_xlat12 = log2(u_xlat12);
					    u_xlat12 = u_xlat12 * 1.5;
					    u_xlat12 = exp2(u_xlat12);
					    u_xlat4.x = u_xlat4.x / u_xlat12;
					    u_xlat25 = u_xlat25 * 0.653110027;
					    u_xlat12 = (-u_xlat26) * 0.600000024 + 1.09000003;
					    u_xlat25 = u_xlat25 / u_xlat12;
					    u_xlat25 = u_xlat26 * 0.300000012 + u_xlat25;
					    u_xlat25 = u_xlat25 * TOD_CloudScattering;
					    u_xlat25 = u_xlat25 * u_xlat4.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat25);
					    u_xlat1.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat27) + u_xlat1.xyz;
					    u_xlat25 = (-u_xlat0.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat4.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat4.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat24) + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_GroundColor.xyz;
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xyz = (-u_xlat1.xyz) + TOD_FogColor.xyz;
					    u_xlat1.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(TOD_Brightness);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat24 = u_xlat0.y * u_xlat0.y;
					    u_xlat24 = u_xlat24 * 500.0;
					    u_xlat24 = min(u_xlat24, 1.00001001);
					    u_xlat2.xyz = vec3(TOD_Brightness) * u_xlat3.xyz + (-u_xlat1.xyz);
					    u_xlat1.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat2.xyz + u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat24 * TOD_CloudOpacity;
					    vs_TEXCOORD2.xyz = u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					mediump vec4 u_xlat16_1;
					lowp float u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat10_2 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump float u_xlat16_2;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat16_1.w = u_xlat0.x * TOD_CloudDensity;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.w = min(max(u_xlat16_1.w, 0.0), 1.0);
					#else
					    u_xlat16_1.w = clamp(u_xlat16_1.w, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = (-u_xlat0.xxx) * vec3(TOD_CloudAttenuation) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_1 * vs_TEXCOORD0;
					    u_xlat16_2 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_2) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp float u_xlat10_10;
					void main()
					{
					    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat10_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_10 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					mediump float u_xlat16_10;
					void main()
					{
					    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).x;
					    u_xlat0.x = u_xlat16_0 + (-TOD_CloudCoverage);
					    u_xlat1.x = u_xlat0.x * TOD_CloudAttenuation;
					    u_xlat1.y = u_xlat0.x * TOD_CloudDensity;
					    u_xlat16_2.xy = (-u_xlat1.xy) + vec2(1.0, 1.0);
					    u_xlat16_2.z = u_xlat1.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2.z = min(max(u_xlat16_2.z, 0.0), 1.0);
					#else
					    u_xlat16_2.z = clamp(u_xlat16_2.z, 0.0, 1.0);
					#endif
					    u_xlat0 = u_xlat16_2.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_2.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_10 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_10) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					lowp float u_xlat10_1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat10_1 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec2 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_0.xw = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_4.x = u_xlat16_0.x * TOD_CloudAttenuation;
					    u_xlat16_0.w = u_xlat16_0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.w = min(max(u_xlat16_0.w, 0.0), 1.0);
					#else
					    u_xlat16_0.w = clamp(u_xlat16_0.w, 0.0, 1.0);
					#endif
					    u_xlat16_4.x = exp2((-u_xlat16_4.x));
					    u_xlat16_4.x = (-u_xlat16_4.x) + 1.0;
					    u_xlat16_0.xyz = (-u_xlat16_4.xxx) + vec3(1.0, 1.0, 1.0);
					    u_xlat0 = u_xlat16_0 * vs_TEXCOORD0;
					    u_xlat16_1 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_1) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					attribute highp vec4 in_POSITION0;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					uniform lowp sampler2D _MainTex;
					uniform lowp sampler2D TOD_BayerTexture;
					varying highp vec4 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD4;
					varying highp vec2 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec4 u_xlat1;
					lowp vec3 u_xlat10_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					lowp vec2 u_xlat10_13;
					mediump vec2 u_xlat16_16;
					lowp float u_xlat10_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture2D(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat10_13.xy = texture2D(_MainTex, u_xlat1.zw).zw;
					    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture2D(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat10_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat10_2.x;
					    u_xlat16_4.yz = u_xlat10_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat10_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat10_19 = texture2D(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat10_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 _ScreenParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec3 TOD_SunSkyColor;
					uniform 	vec3 TOD_MoonSkyColor;
					uniform 	vec3 TOD_SunCloudColor;
					uniform 	vec3 TOD_MoonCloudColor;
					uniform 	vec3 TOD_FogColor;
					uniform 	vec3 TOD_GroundColor;
					uniform 	vec3 TOD_LocalSunDirection;
					uniform 	vec3 TOD_LocalMoonDirection;
					uniform 	float TOD_Contrast;
					uniform 	float TOD_Brightness;
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_MoonHaloPower;
					uniform 	vec3 TOD_MoonHaloColor;
					uniform 	float TOD_CloudOpacity;
					uniform 	float TOD_CloudColoring;
					uniform 	float TOD_CloudScattering;
					uniform 	float TOD_CloudBrightness;
					uniform 	vec3 TOD_CloudOffset;
					uniform 	vec3 TOD_CloudWind;
					uniform 	vec3 TOD_CloudSize;
					uniform 	vec3 TOD_kBetaMie;
					uniform 	vec4 TOD_kSun;
					uniform 	vec4 TOD_k4PI;
					uniform 	vec4 TOD_kRadius;
					uniform 	vec4 TOD_kScale;
					in highp vec4 in_POSITION0;
					out highp vec4 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out highp vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec4 u_xlat7;
					float u_xlat8;
					float u_xlat11;
					vec3 u_xlat13;
					float u_xlat14;
					float u_xlat16;
					vec2 u_xlat20;
					float u_xlat25;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					float u_xlat31;
					int u_xlati32;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = dot(in_POSITION0.xyz, in_POSITION0.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat1.xyz = u_xlat1.xxx * in_POSITION0.xyz;
					    u_xlat2.x = u_xlat1.y * 0.899999976 + 0.100000001;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.xy = u_xlat1.xz * u_xlat2.xx;
					    u_xlat2.xy = u_xlat2.xy / TOD_CloudSize.xz;
					    u_xlat20.xy = u_xlat2.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.xy = u_xlat20.xy + TOD_CloudWind.xz;
					    u_xlat20.x = dot(vec2(0.98480773, -0.173648179), u_xlat2.xy);
					    u_xlat20.y = dot(vec2(0.173648179, 0.98480773), u_xlat2.xy);
					    u_xlat2.xy = u_xlat20.xy + TOD_CloudOffset.xz;
					    vs_TEXCOORD1.zw = u_xlat2.xy + TOD_CloudWind.xz;
					    u_xlat2.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat11 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.w = u_xlat11 * 0.5;
					    u_xlat2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat0.ww;
					    u_xlat2.xy = u_xlat2.xy * _ScreenParams.xy;
					    vs_TEXCOORD5.xy = u_xlat2.xy * vec2(0.125, 0.125);
					    u_xlat1.w = max(u_xlat1.y, 0.0);
					    u_xlat2.x = dot(u_xlat1.xzw, u_xlat1.xzw);
					    u_xlat2.x = inversesqrt(u_xlat2.x);
					    u_xlat2.xyz = u_xlat1.xwz * u_xlat2.xxx;
					    u_xlat3.y = TOD_kRadius.x + TOD_kScale.w;
					    u_xlat29 = u_xlat2.y * u_xlat2.y;
					    u_xlat29 = u_xlat29 * TOD_kRadius.y + TOD_kRadius.w;
					    u_xlat29 = u_xlat29 + (-TOD_kRadius.y);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat29 = (-TOD_kRadius.x) * u_xlat2.y + u_xlat29;
					    u_xlat30 = (-TOD_kScale.w) * TOD_kScale.z;
					    u_xlat30 = u_xlat30 * 1.44269502;
					    u_xlat30 = exp2(u_xlat30);
					    u_xlat4.x = u_xlat2.y * u_xlat3.y;
					    u_xlat4.x = u_xlat4.x / u_xlat3.y;
					    u_xlat4.x = (-u_xlat4.x) + 1.0;
					    u_xlat13.x = u_xlat4.x * 5.25 + -6.80000019;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 3.82999992;
					    u_xlat13.x = u_xlat4.x * u_xlat13.x + 0.458999991;
					    u_xlat4.x = u_xlat4.x * u_xlat13.x + -0.00286999997;
					    u_xlat4.x = u_xlat4.x * 1.44269502;
					    u_xlat4.x = exp2(u_xlat4.x);
					    u_xlat30 = u_xlat30 * u_xlat4.x;
					    u_xlat29 = u_xlat29 * 0.5;
					    u_xlat4.x = u_xlat29 * TOD_kScale.x;
					    u_xlat13.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat3.x = float(0.0);
					    u_xlat3.z = float(0.0);
					    u_xlat3.xyz = u_xlat13.xyz * vec3(0.5, 0.5, 0.5) + u_xlat3.xyz;
					    u_xlat13.xyz = TOD_k4PI.www + TOD_k4PI.xyz;
					    u_xlat5.xyz = u_xlat3.xyz;
					    u_xlat6.x = float(0.0);
					    u_xlat6.y = float(0.0);
					    u_xlat6.z = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<2 ; u_xlati_loop_1++)
					    {
					        u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
					        u_xlat33 = sqrt(u_xlat33);
					        u_xlat33 = max(u_xlat33, 1.0);
					        u_xlat7.x = float(1.0) / u_xlat33;
					        u_xlat33 = (-u_xlat33) + TOD_kRadius.x;
					        u_xlat33 = u_xlat33 * TOD_kScale.z;
					        u_xlat33 = u_xlat33 * 1.44269502;
					        u_xlat33 = exp2(u_xlat33);
					        u_xlat16 = u_xlat4.x * u_xlat33;
					        u_xlat25 = dot(u_xlat2.xyz, u_xlat5.xyz);
					        u_xlat34 = dot(TOD_LocalSunDirection.xyz, u_xlat5.xyz);
					        u_xlat34 = (-u_xlat34) * u_xlat7.x + 1.0;
					        u_xlat8 = u_xlat34 * 5.25 + -6.80000019;
					        u_xlat8 = u_xlat34 * u_xlat8 + 3.82999992;
					        u_xlat8 = u_xlat34 * u_xlat8 + 0.458999991;
					        u_xlat34 = u_xlat34 * u_xlat8 + -0.00286999997;
					        u_xlat34 = u_xlat34 * 1.44269502;
					        u_xlat34 = exp2(u_xlat34);
					        u_xlat7.x = (-u_xlat25) * u_xlat7.x + 1.0;
					        u_xlat25 = u_xlat7.x * 5.25 + -6.80000019;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 3.82999992;
					        u_xlat25 = u_xlat7.x * u_xlat25 + 0.458999991;
					        u_xlat7.x = u_xlat7.x * u_xlat25 + -0.00286999997;
					        u_xlat7.x = u_xlat7.x * 1.44269502;
					        u_xlat7.x = exp2(u_xlat7.x);
					        u_xlat7.x = u_xlat7.x * 0.25;
					        u_xlat7.x = u_xlat34 * 0.25 + (-u_xlat7.x);
					        u_xlat33 = u_xlat33 * u_xlat7.x;
					        u_xlat33 = u_xlat30 * 0.25 + u_xlat33;
					        u_xlat7.xzw = u_xlat13.xyz * (-vec3(u_xlat33));
					        u_xlat7.xzw = u_xlat7.xzw * vec3(1.44269502, 1.44269502, 1.44269502);
					        u_xlat7.xzw = exp2(u_xlat7.xzw);
					        u_xlat6.xyz = u_xlat7.xzw * vec3(u_xlat16) + u_xlat6.xyz;
					        u_xlat5.xyz = u_xlat2.xyz * vec3(u_xlat29) + u_xlat5.xyz;
					    }
					    u_xlat2.xyz = u_xlat6.xyz * TOD_SunSkyColor.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * TOD_kSun.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * TOD_kSun.www;
					    u_xlat29 = TOD_LocalSunDirection.y * 4.0 + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, TOD_LocalSunDirection.xyz);
					    u_xlat4.x = u_xlat30 + 1.25;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 * u_xlat4.x;
					    u_xlat4.xyz = TOD_SunCloudColor.xyz + (-TOD_MoonCloudColor.xyz);
					    u_xlat4.xyz = vec3(u_xlat29) * u_xlat4.xyz + TOD_MoonCloudColor.xyz;
					    u_xlat5.xyz = (-u_xlat4.xyz) + TOD_FogColor.xyz;
					    u_xlat4.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat29 = u_xlat30 * u_xlat30;
					    u_xlat28 = (-u_xlat1.w) * 0.75 + 1.0;
					    u_xlat31 = dot(u_xlat1.xyz, TOD_LocalMoonDirection.xyz);
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = log2(u_xlat31);
					    u_xlat31 = u_xlat31 * TOD_MoonHaloPower;
					    u_xlat31 = exp2(u_xlat31);
					    u_xlat29 = u_xlat29 * 0.75 + 0.75;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29);
					    u_xlat29 = u_xlat30 * u_xlat30 + 1.0;
					    u_xlat5.x = u_xlat29 * TOD_kBetaMie.x;
					    u_xlat14 = TOD_kBetaMie.z * u_xlat30 + TOD_kBetaMie.y;
					    u_xlat14 = log2(u_xlat14);
					    u_xlat14 = u_xlat14 * 1.5;
					    u_xlat14 = exp2(u_xlat14);
					    u_xlat5.x = u_xlat5.x / u_xlat14;
					    u_xlat29 = u_xlat29 * 0.653110027;
					    u_xlat14 = (-u_xlat30) * 0.600000024 + 1.09000003;
					    u_xlat29 = u_xlat29 / u_xlat14;
					    u_xlat29 = u_xlat30 * 0.300000012 + u_xlat29;
					    u_xlat29 = u_xlat29 * TOD_CloudScattering;
					    u_xlat29 = u_xlat29 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat29);
					    u_xlat2.xyz = TOD_MoonHaloColor.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat29 = (-u_xlat1.y);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat5.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat5.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    vs_TEXCOORD4.xyz = exp2(u_xlat2.xyz);
					    u_xlat2.xyz = TOD_MoonSkyColor.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_GroundColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = (-u_xlat2.xyz) + TOD_FogColor.xyz;
					    u_xlat2.xyz = vec3(vec3(TOD_Fogginess, TOD_Fogginess, TOD_Fogginess)) * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(TOD_Brightness);
					    u_xlat2.xyz = log2(u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(TOD_Contrast, TOD_Contrast, TOD_Contrast));
					    u_xlat2.xyz = exp2(u_xlat2.xyz);
					    u_xlat28 = u_xlat1.y * u_xlat1.y;
					    u_xlat28 = u_xlat28 * 500.0;
					    u_xlat28 = min(u_xlat28, 1.00001001);
					    u_xlat3.xyz = vec3(TOD_Brightness) * u_xlat4.xyz + (-u_xlat2.xyz);
					    u_xlat2.xyz = vec3(vec3(TOD_CloudColoring, TOD_CloudColoring, TOD_CloudColoring)) * u_xlat3.xyz + u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz * vec3(vec3(TOD_CloudBrightness, TOD_CloudBrightness, TOD_CloudBrightness));
					    vs_TEXCOORD0.w = u_xlat28 * TOD_CloudOpacity;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD2.xyz = u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = TOD_LocalSunDirection.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	float TOD_Fogginess;
					uniform 	float TOD_CloudCoverage;
					uniform 	float TOD_CloudSharpness;
					uniform 	float TOD_CloudDensity;
					uniform 	float TOD_CloudAttenuation;
					uniform 	float TOD_CloudSaturation;
					UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
					UNITY_LOCATION(1) uniform mediump sampler2D TOD_BayerTexture;
					in highp vec4 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD4;
					in highp vec2 vs_TEXCOORD5;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec2 u_xlat16_13;
					mediump vec2 u_xlat16_16;
					mediump float u_xlat16_19;
					mediump float u_xlat16_21;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD2.xz * vec2(0.300000012, 0.300000012) + vs_TEXCOORD1.zw;
					    u_xlat0.w = texture(_MainTex, u_xlat0.xy).w;
					    u_xlat1 = vs_TEXCOORD2.xzxz * vec4(0.100000001, 0.100000001, 0.200000003, 0.200000003) + vs_TEXCOORD1.zwxy;
					    u_xlat16_13.xy = texture(_MainTex, u_xlat1.zw).zw;
					    u_xlat16_2.xyz = texture(_MainTex, u_xlat1.xy).yzw;
					    u_xlat3 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat3.yzw;
					    u_xlat0.y = u_xlat16_2.x;
					    u_xlat16_4.yz = u_xlat16_13.xy + u_xlat16_4.yz;
					    u_xlat0.z = u_xlat16_13.x;
					    u_xlat16_21 = u_xlat0.w + u_xlat16_4.z;
					    u_xlat3.yz = u_xlat16_4.xy;
					    u_xlat3.w = u_xlat16_21;
					    u_xlat16_4.x = dot(u_xlat3, vec4(0.5, 0.125, 0.0416666679, 0.015625));
					    u_xlat0.x = u_xlat3.x;
					    u_xlat16_4.y = dot(u_xlat0, vec4(0.5, 0.25, 0.125, 0.0625));
					    u_xlat0.x = TOD_CloudSharpness + TOD_CloudCoverage;
					    u_xlat16_16.xy = (-u_xlat0.xx) + u_xlat16_4.xy;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_16.xy = min(max(u_xlat16_16.xy, 0.0), 1.0);
					#else
					    u_xlat16_16.xy = clamp(u_xlat16_16.xy, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy + (-vec2(TOD_CloudCoverage));
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(TOD_CloudDensity, TOD_CloudDensity));
					    u_xlat16_5.x = float(1.0) / TOD_CloudSharpness;
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_5.xx;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_4.xy = min(max(u_xlat16_4.xy, 0.0), 1.0);
					#else
					    u_xlat16_4.xy = clamp(u_xlat16_4.xy, 0.0, 1.0);
					#endif
					    u_xlat16_5.xy = u_xlat16_4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat16_4.xy;
					    u_xlat16_4.xy = u_xlat16_5.xy * u_xlat16_4.xy + u_xlat16_16.xy;
					    u_xlat16_5.z = u_xlat16_4.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_5.z = min(max(u_xlat16_5.z, 0.0), 1.0);
					#else
					    u_xlat16_5.z = clamp(u_xlat16_5.z, 0.0, 1.0);
					#endif
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(TOD_CloudAttenuation, TOD_CloudSaturation);
					    u_xlat16_4.xy = exp2((-u_xlat16_4.xy));
					    u_xlat16_4.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat16_5.xy = (-u_xlat16_4.xy) + vec2(1.0, 1.0);
					    u_xlat0 = u_xlat16_5.xxxz * vs_TEXCOORD0;
					    u_xlat1.x = (-TOD_Fogginess) + 1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat16_5.y;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD4.xyz + u_xlat0.xyz;
					    u_xlat16_19 = texture(TOD_BayerTexture, vs_TEXCOORD5.xy).w;
					    u_xlat0.xyz = vec3(u_xlat16_19) * vec3(0.0153846154, 0.0153846154, 0.0153846154) + u_xlat1.xyz;
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "TOD_CLOUDS_BUMPED" "TOD_CLOUDS_DENSITY" "TOD_OUTPUT_DITHERING" "TOD_OUTPUT_HDR" "TOD_OUTPUT_LINEAR" }
					"!!GLES3"
				}
			}
		}
	}
}